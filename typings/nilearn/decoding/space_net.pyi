"""
This type stub file was generated by pyright.
"""

from sklearn.linear_model import LinearRegression
from .._utils import fill_doc
from .._utils.cache_mixin import CacheMixin

"""sklearn-compatible implementation of spatially structured learners.

For example: TV-L1, Graph-Net, etc
"""
class _EarlyStoppingCallback:
    """Out-of-bag early stopping.

    A callable that returns True when the test error starts
    rising. We use a Spearman correlation (between X_test.w and y_test)
    for scoring.
    """
    def __init__(self, X_test, y_test, is_classif, debias=..., verbose=...) -> None:
        ...
    
    def __call__(self, variables): # -> bool | None:
        """Perform callback."""
        ...
    
    def test_score(self, w): # -> tuple[float, float] | tuple[Unknown, Unknown]:
        """Compute test score for model, given weights map `w`.

        We use correlations between linear prediction and
        ground truth (y_test).

        We return 2 scores for model selection: one is the Spearman
        correlation, which captures ordering between input and
        output, but tends to have 'flat' regions. The other
        is the Pearson correlation, that we can use to disambiguate
        between regions with equivalent Spearman correlation.

        """
        ...
    


@fill_doc
def path_scores(solver, X, y, mask, alphas, l1_ratios, train, test, solver_params, is_classif=..., n_alphas=..., eps=..., key=..., debias=..., Xmean=..., screening_percentile=..., verbose=...): # -> tuple[NDArray[Unknown], NDArray[Any] | NDArray[float64] | Unknown, Any | Unknown | None, Unknown, Unbound | list[Any] | NDArray[Any] | Unknown, Any | Unknown | NDArray[float64], Unknown | None]:
    """Compute scores of different alphas in regression \
    and classification used by CV objects.

    Parameters
    ----------
    X : 2D array of shape (n_samples, n_features)
        Design matrix, one row per sample point.

    y : 1D array of length n_samples
        Response vector; one value per sample.

    mask : 3D arrays of boolean
        Mask defining brain regions that we work on.

    alphas : list of floats
        List of regularization parameters being considered.

    train : array or list of integers
        List of indices for the train samples.

    test : array or list of integers
        List of indices for the test samples.

    l1_ratios : float or list of floats in the interval [0, 1];\
        optional (default .5)
        Constant that mixes L1 and TV (resp. Graph-Net) penalization.
        l1_ratios == 0: just smooth. l1_ratios == 1: just lasso.

    eps : float, optional (default 1e-3)
        Length of the path. For example, ``eps=1e-3`` means that
        ``alpha_min / alpha_max = 1e-3``.

    n_alphas : int, optional (default 10).
        Generate this number of alphas per regularization path.
        This parameter is mutually exclusive with the `alphas` parameter.

    solver : function handle
       See for example tv.TVl1Classifier documentation.

    solver_params : dict
       Dictionary of param-value pairs to be passed to solver.

    is_classif : bool, optional
        Indicates whether the loss is a classification loss or a
        regression loss. Default=False.

    Xmean: ??? TODO: Add description.

    key: ??? TODO: Add description.

    debias : bool, optional
        If set, then the estimated weights maps will be debiased.
        Default=False.

    screening_percentile : float in the interval [0, 100], optional\
        (default 20)
        Percentile value for ANOVA univariate feature selection. A value of
        100 means 'keep all features'. This percentile is expressed
        w.r.t the volume of a standard (MNI152) brain, and so is corrected
        at runtime to correspond to the volume of the user-supplied mask
        (which is typically smaller). If '100' is given, all the features
        are used, regardless of the number of voxels.
    %(verbose)s

    """
    ...

@fill_doc
class BaseSpaceNet(LinearRegression, CacheMixin):
    """Regression and classification learners with sparsity and spatial priors.

    `SpaceNet` implements Graph-Net and TV-L1 priors /
    penalties. Thus, the penalty is a sum of an L1 term and a spatial term. The
    aim of such a hybrid prior is to obtain weights maps which are structured
    (due to the spatial prior) and sparse (enforced by L1 norm).

    Parameters
    ----------
    penalty : string, optional (default 'graph-net')
        Penalty to used in the model. Can be 'graph-net' or 'tv-l1'.

    loss : string, optional (default None)
        Loss to be used in the model. Must be an one of "mse", or "logistic".

    is_classif : bool, optional (default False)
        Flag telling whether the learning task is classification or regression.

    l1_ratios : float or list of floats in the interval [0, 1];\
        optional (default .5)
        Constant that mixes L1 and spatial prior terms in penalization.
        l1_ratios == 1 corresponds to pure LASSO. The larger the value of this
        parameter, the sparser the estimated weights map. If list is provided,
        then the best value will be selected by cross-validation.

    alphas : float or list of floats, optional (default None)
        Choices for the constant that scales the overall regularization term.
        This parameter is mutually exclusive with the `n_alphas` parameter.
        If None or list of floats is provided, then the best value will be
        selected by cross-validation.

    n_alphas : int, optional (default 10).
        Generate this number of alphas per regularization path.
        This parameter is mutually exclusive with the `alphas` parameter.

    eps : float, optional (default 1e-3)
        Length of the path. For example, ``eps=1e-3`` means that
        ``alpha_min / alpha_max = 1e-3``

    mask : filename, niimg, NiftiMasker instance, optional (default None)
        Mask to be used on data. If an instance of masker is passed,
        then its mask will be used. If no mask is it will be computed
        automatically by a NiftiMasker.
    %(target_affine)s
        An important use-case of this parameter is for downsampling the
        input data to a coarser resolution (to speed of the model fit).
    %(target_shape)s
    %(low_pass)s
    %(high_pass)s
    %(t_r)s
    screening_percentile : float in the interval [0, 100]; Optional (\
        default 20)
        Percentile value for ANOVA univariate feature selection. A value of
        100 means 'keep all features'. This percentile is expressed
        w.r.t the volume of a standard (MNI152) brain, and so is corrected
        at runtime to correspond to the volume of the user-supplied mask
        (which is typically smaller). If '100' is given, all the features
        are used, regardless of the number of voxels.

    standardize : bool, optional (default True):
        If set, then the data (X, y) are centered to have mean zero along
        axis 0. This is here because nearly all linear models will want
        their data to be centered.

    fit_intercept : bool, optional (default True)
        Fit or not an intercept.

    max_iter : int (default 200)
        Defines the iterations for the solver.

    tol : float, optional (default 5e-4)
        Defines the tolerance for convergence for the backend FISTA solver.
    %(verbose)s
    %(n_jobs)s
    %(memory)s
    %(memory_level1)s
    cv : int, a cv generator instance, or None (default 8)
        The input specifying which cross-validation generator to use.
        It can be an integer, in which case it is the number of folds in a
        KFold, None, in which case 3 fold is used, or another object, that
        will then be used as a cv generator.

    debias : bool, optional (default False)
        If set, then the estimated weights maps will be debiased.

    Attributes
    ----------
    `all_coef_` : ndarray, shape (n_l1_ratios, n_folds, n_features)
        Coefficients for all folds and features.

    `alpha_grids_` : ndarray, shape (n_folds, n_alphas)
        Alpha values considered for selection of the best ones
        (saved in `best_model_params_`)

    `best_model_params_` : ndarray, shape (n_folds, n_parameter)
        Best model parameters (alpha, l1_ratio) saved for the different
        cross-validation folds.

    `classes_` : ndarray of labels (`n_classes_`)
        Labels of the classes (for classification problems)

    `n_classes_` : int
        Number of classes (for classification problems)

    `coef_` : ndarray, shape\
        (1, n_features) for 2 class classification problems\
        (i.e n_classes = 2)\
        (n_classes, n_features) for n_classes > 2
        Coefficient of the features in the decision function.

    `coef_img_` : nifti image
        Masked model coefficients

    `mask_` : ndarray 3D
        An array contains values of the mask image.

    `masker_` : instance of NiftiMasker
        The nifti masker used to mask the data.

    `mask_img_` : Nifti like image
        The mask of the data. If no mask was supplied by the user,
        this attribute is the mask image computed automatically from the
        data `X`.

    `memory_` : joblib memory cache

    `intercept_` : narray, shape
        (1,) for 2 class classification problems (i.e n_classes = 2)
        (n_classes,) for n_classes > 2
        Intercept (a.k.a. bias) added to the decision function.
        It is available only when parameter intercept is set to True.

    `cv_` : list of pairs of lists
        Each pair is the list of indices for the train and test samples
        for the corresponding fold.

    `cv_scores_` : ndarray, shape (n_folds, n_alphas)\
        or (n_l1_ratios, n_folds, n_alphas)
        Scores (misclassification) for each alpha, and on each fold

    `screening_percentile_` : float
        Screening percentile corrected according to volume of mask,
        relative to the volume of standard brain.

    `w_` : ndarray, shape
        (1, n_features + 1) for 2 class classification problems
        (i.e n_classes = 2)
        (n_classes, n_features + 1) for n_classes > 2, and (n_features,)
        for regression
        Model weights

    `ymean_` : array, shape (n_samples,)
        Mean of prediction targets

    `Xmean_` : array, shape (n_features,)
        Mean of X across samples

    `Xstd_` : array, shape (n_features,)
        Standard deviation of X across samples
    """
    SUPPORTED_PENALTIES = ...
    SUPPORTED_LOSSES = ...
    def __init__(self, penalty=..., is_classif=..., loss=..., l1_ratios=..., alphas=..., n_alphas=..., mask=..., target_affine=..., target_shape=..., low_pass=..., high_pass=..., t_r=..., max_iter=..., tol=..., memory=..., memory_level=..., standardize=..., verbose=..., mask_args=..., n_jobs=..., eps=..., cv=..., fit_intercept=..., screening_percentile=..., debias=...) -> None:
        ...
    
    def check_params(self): # -> None:
        """Make sure parameters are sane."""
        ...
    
    def fit(self, X, y):
        """Fit the learner.

        Parameters
        ----------
        X : list of Niimg-like objects
            See :ref:`extracting_data`.
            Data on which model is to be fitted. If this is a list,
            the affine is considered the same for all.

        y : array or list of length n_samples
            The dependent variable (age, sex, QI, etc.).

        Notes
        -----
        self : `SpaceNet` object
            Model selection is via cross-validation with bagging.
        """
        ...
    
    def decision_function(self, X): # -> Any:
        """Predict confidence scores for samples.

        The confidence score for a sample is the signed distance of that
        sample to the hyperplane.

        Parameters
        ----------
        X : {array-like, sparse matrix}, shape = (n_samples, n_features)
            Samples.

        Returns
        -------
        array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)
            Confidence scores per (sample, class) combination. In the binary
            case, confidence score for `self.classes_[1]` where >0 means this
            class would be predicted.
        """
        ...
    
    def predict(self, X): # -> Any:
        """Predict class labels for samples in X.

        Parameters
        ----------
        X : list of Niimg-like objects
            See :ref:`extracting_data`.
            Data on prediction is to be made. If this is a list,
            the affine is considered the same for all.

        Returns
        -------
        y_pred : ndarray, shape (n_samples,)
            Predicted class label per sample.
        """
        ...
    


@fill_doc
class SpaceNetClassifier(BaseSpaceNet):
    """Classification learners with sparsity and spatial priors.

    `SpaceNetClassifier` implements Graph-Net and TV-L1
    priors / penalties for classification problems. Thus, the penalty
    is a sum an L1 term and a spatial term. The aim of such a hybrid prior
    is to obtain weights maps which are structured (due to the spatial
    prior) and sparse (enforced by L1 norm).

    Parameters
    ----------
    penalty : string, optional (default 'graph-net')
        Penalty to used in the model. Can be 'graph-net' or 'tv-l1'.

    loss : string, optional (default "logistic")
        Loss to be used in the classifier. Must be one of "mse", or "logistic".

    l1_ratios : float or list of floats in the interval [0, 1];\
        optional (default .5)
        Constant that mixes L1 and spatial prior terms in penalization.
        l1_ratios == 1 corresponds to pure LASSO. The larger the value of this
        parameter, the sparser the estimated weights map. If list is provided,
        then the best value will be selected by cross-validation.

    alphas : float or list of floats, optional (default None)
        Choices for the constant that scales the overall regularization term.
        This parameter is mutually exclusive with the `n_alphas` parameter.
        If None or list of floats is provided, then the best value will be
        selected by cross-validation.

    n_alphas : int, optional (default 10).
        Generate this number of alphas per regularization path.
        This parameter is mutually exclusive with the `alphas` parameter.

    eps : float, optional (default 1e-3)
        Length of the path. For example, ``eps=1e-3`` means that
        ``alpha_min / alpha_max = 1e-3``.

    mask : filename, niimg, NiftiMasker instance, optional (default None)
        Mask to be used on data. If an instance of masker is passed,
        then its mask will be used. If no mask is it will be computed
        automatically by a MultiNiftiMasker with default parameters.
    %(target_affine)s
    %(target_shape)s
    %(low_pass)s
    %(high_pass)s
    %(t_r)s
    screening_percentile : float in the interval [0, 100]; Optional\
        (default 20)
        Percentile value for ANOVA univariate feature selection.
        A value of 100 means 'keep all features'.
        This percentile is expressed w.r.t the volume
        of a standard (MNI152) brain, and so is corrected
        at runtime by premultiplying it with the ratio of the volume
        of the mask of the data and volume of a standard brain.
        If '100' is given, all the features are used,
        regardless of the number of voxels.

    standardize : bool, optional (default True):
        If set, then we'll center the data (X, y) have mean zero along axis 0.
        This is here because nearly all linear models will want their data
        to be centered.

    fit_intercept : bool, optional (default True)
        Fit or not an intercept.

    max_iter : int (default 200)
        Defines the iterations for the solver.

    tol : float
        Defines the tolerance for convergence. Defaults to 1e-4.
    %(verbose)s
    %(n_jobs)s
    %(memory)s
    %(memory_level1)s
    cv : int, a cv generator instance, or None (default 8)
        The input specifying which cross-validation generator to use.
        It can be an integer, in which case it is the number of folds in a
        KFold, None, in which case 3 fold is used, or another object, that
        will then be used as a cv generator.

    debias : bool, optional (default False)
        If set, then the estimated weights maps will be debiased.

    Attributes
    ----------
    `all_coef_` : ndarray, shape (n_l1_ratios, n_folds, n_features)
        Coefficients for all folds and features.

    `alpha_grids_` : ndarray, shape (n_folds, n_alphas)
        Alpha values considered for selection of the best ones
        (saved in `best_model_params_`)

    `best_model_params_` : ndarray, shape (n_folds, n_parameter)
        Best model parameters (alpha, l1_ratio) saved for the different
        cross-validation folds.

    `classes_` : ndarray of labels (`n_classes_`)
        Labels of the classes

    `n_classes_` : int
        Number of classes

    `coef_` : ndarray, shape
        (1, n_features) for 2 class classification problems (i.e n_classes = 2)
        (n_classes, n_features) for n_classes > 2
        Coefficient of the features in the decision function.

    `coef_img_` : nifti image
        Masked model coefficients

    `mask_` : ndarray 3D
        An array contains values of the mask image.

    `masker_` : instance of NiftiMasker
        The nifti masker used to mask the data.

    `mask_img_` : Nifti like image
        The mask of the data. If no mask was supplied by the user,
        this attribute is the mask image computed automatically from the
        data `X`.

    `memory_` : joblib memory cache

    `intercept_` : narray, shape
        (1, ) for 2 class classification problems (i.e n_classes = 2)
        (n_classes, ) for n_classes > 2
        Intercept (a.k.a. bias) added to the decision function.
        It is available only when parameter intercept is set to True.

    `cv_` : list of pairs of lists
        Each pair is the list of indices for the train and test
        samples for the corresponding fold.

    `cv_scores_` : ndarray, shape (n_folds, n_alphas)\
        or (n_l1_ratios, n_folds, n_alphas)
        Scores (misclassification) for each alpha, and on each fold

    `screening_percentile_` : float
        Screening percentile corrected according to volume of mask,
        relative to the volume of standard brain.

    `w_` : ndarray, shape
        (1, n_features + 1) for 2 class classification problems
        (i.e n_classes = 2)
        (n_classes, n_features + 1) for n_classes > 2
        Model weights

    `ymean_` : array, shape (n_samples,)
        Mean of prediction targets

    `Xmean_` : array, shape (n_features,)
        Mean of X across samples

    `Xstd_` : array, shape (n_features,)
        Standard deviation of X across samples

    See Also
    --------
    nilearn.decoding.SpaceNetRegressor: Graph-Net and TV-L1 priors/penalties

    """
    def __init__(self, penalty=..., loss=..., l1_ratios=..., alphas=..., n_alphas=..., mask=..., target_affine=..., target_shape=..., low_pass=..., high_pass=..., t_r=..., max_iter=..., tol=..., memory=..., memory_level=..., standardize=..., verbose=..., n_jobs=..., eps=..., cv=..., fit_intercept=..., screening_percentile=..., debias=...) -> None:
        ...
    
    def score(self, X, y): # -> Any | matrix[Any, Any]:
        """Return the mean accuracy on the given test data and labels.

        Parameters
        ----------
        X : list of Niimg-like objects
            See :ref:`extracting_data`.
            Data on which model is to be fitted. If this is a list,
            the affine is considered the same for all.

        y : array or list of length n_samples.
            Labels.

        Returns
        -------
        score : float
            Mean accuracy of self.predict(X)  w.r.t y.
        """
        ...
    


@fill_doc
class SpaceNetRegressor(BaseSpaceNet):
    """Regression learners with sparsity and spatial priors.

    `SpaceNetRegressor` implements Graph-Net and TV-L1 priors / penalties
    for regression problems. Thus, the penalty is a sum an L1 term and a
    spatial term. The aim of such a hybrid prior is to obtain weights maps
    which are structured (due to the spatial prior) and sparse (enforced
    by L1 norm).

    Parameters
    ----------
    penalty : string, optional (default 'graph-net')
        Penalty to used in the model. Can be 'graph-net' or 'tv-l1'.

    l1_ratios : float or list of floats in the interval [0, 1];\
        optional (default .5)
        Constant that mixes L1 and spatial prior terms in penalization.
        l1_ratios == 1 corresponds to pure LASSO. The larger the value of this
        parameter, the sparser the estimated weights map. If list is provided,
        then the best value will be selected by cross-validation.

    alphas : float or list of floats, optional (default None)
        Choices for the constant that scales the overall regularization term.
        This parameter is mutually exclusive with the `n_alphas` parameter.
        If None or list of floats is provided, then the best value will be
        selected by cross-validation.

    n_alphas : int, optional (default 10).
        Generate this number of alphas per regularization path.
        This parameter is mutually exclusive with the `alphas` parameter.

    eps : float, optional (default 1e-3)
        Length of the path. For example, ``eps=1e-3`` means that
        ``alpha_min / alpha_max = 1e-3``

    mask : filename, niimg, NiftiMasker instance, optional (default None)
        Mask to be used on data. If an instance of masker is passed,
        then its mask will be used. If no mask is it will be computed
        automatically by a MultiNiftiMasker with default parameters.
    %(target_affine)s
    %(target_shape)s
    %(low_pass)s
    %(high_pass)s
    %(t_r)s
    screening_percentile : float in the interval [0, 100]; Optional\
        (default 20)
        Percentile value for ANOVA univariate feature selection.
        A value of 100 means 'keep all features'.
        This percentile is expressed w.r.t the volume
        of a standard (MNI152) brain, and so is corrected
        at runtime to correspond to the volume of the user-supplied mask
        (which is typically smaller).

    standardize : bool, optional (default True):
        If set, then we'll center the data (X, y) have mean zero along axis 0.
        This is here because nearly all linear models will want their data
        to be centered.

    fit_intercept : bool, optional (default True)
        Fit or not an intercept.

    max_iter : int (default 200)
        Defines the iterations for the solver.

    tol : float
        Defines the tolerance for convergence. Defaults to 1e-4.
    %(verbose)s
    %(n_jobs)s
    %(memory)s
    %(memory_level1)s
    cv : int, a cv generator instance, or None (default 8)
        The input specifying which cross-validation generator to use.
        It can be an integer, in which case it is the number of folds in a
        KFold, None, in which case 3 fold is used, or another object, that
        will then be used as a cv generator.

    debias: bool, optional (default False)
        If set, then the estimated weights maps will be debiased.

    Attributes
    ----------
    `all_coef_` : ndarray, shape (n_l1_ratios, n_folds, n_features)
        Coefficients for all folds and features.

    `alpha_grids_` : ndarray, shape (n_folds, n_alphas)
        Alpha values considered for selection of the best ones
        (saved in `best_model_params_`)

    `best_model_params_` : ndarray, shape (n_folds, n_parameter)
        Best model parameters (alpha, l1_ratio) saved for the different
        cross-validation folds.

    `coef_` : ndarray, shape (n_features,)
        Coefficient of the features in the decision function.

    `coef_img_` : nifti image
        Masked model coefficients

    `mask_` : ndarray 3D
        An array contains values of the mask image.

    `masker_` : instance of NiftiMasker
        The nifti masker used to mask the data.

    `mask_img_` : Nifti like image
        The mask of the data. If no mask was supplied by the user, this
        attribute is the mask image computed automatically from the data `X`.

    `memory_` : joblib memory cache

    `intercept_` : narray, shape (1)
        Intercept (a.k.a. bias) added to the decision function.
        It is available only when parameter intercept is set to True.

    `cv_` : list of pairs of lists
        Each pair is the list of indices for the train and test
        samples for the corresponding fold.

    `cv_scores_` : ndarray, shape (n_folds, n_alphas)\
        or (n_l1_ratios, n_folds, n_alphas)
        Scores (misclassification) for each alpha, and on each fold

    `screening_percentile_` : float
        Screening percentile corrected according to volume of mask,
        relative to the volume of standard brain.

    `w_` : ndarray, shape (n_features,)
        Model weights

    `ymean_` : array, shape (n_samples,)
        Mean of prediction targets

    `Xmean_` : array, shape (n_features,)
        Mean of X across samples

    `Xstd_` : array, shape (n_features,)
        Standard deviation of X across samples

    See Also
    --------
    nilearn.decoding.SpaceNetClassifier: Graph-Net and TV-L1 priors/penalties

    """
    def __init__(self, penalty=..., l1_ratios=..., alphas=..., n_alphas=..., mask=..., target_affine=..., target_shape=..., low_pass=..., high_pass=..., t_r=..., max_iter=..., tol=..., memory=..., memory_level=..., standardize=..., verbose=..., n_jobs=..., eps=..., cv=..., fit_intercept=..., screening_percentile=..., debias=...) -> None:
        ...
    


