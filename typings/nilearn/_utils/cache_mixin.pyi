"""
This type stub file was generated by pyright.
"""

"""Mixin for cache with joblib."""
MEMORY_CLASSES = ...
class _ShelvedFunc:
    """Work around for Python 2, for which pickle fails on instance method."""
    def __init__(self, func) -> None:
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    


def cache(func, memory, func_memory_level=..., memory_level=..., shelve=..., **kwargs): # -> _ShelvedFunc | partial[Unknown] | NotMemorizedFunc | MemorizedFunc:
    """Return a joblib.Memory object.

    The memory_level determines the level above which the wrapped
    function output is cached. By specifying a numeric value for
    this level, the user can to control the amount of cache memory
    used. This function will cache the function call or not
    depending on the cache level.

    Parameters
    ----------
    func : function
        The function which output is to be cached.

    memory : instance of joblib.Memory, string or pathlib.Path
        Used to cache the function call.

    func_memory_level : int, optional
        The memory_level from which caching must be enabled for the wrapped
        function.

    memory_level : int, optional
        The memory_level used to determine if function call must
        be cached or not (if user_memory_level is equal of greater than
        func_memory_level the function is cached).

    shelve : bool, optional
        Whether to return a joblib MemorizedResult, callable by a .get()
        method, instead of the return value of func.
        Default=False.

    kwargs : keyword arguments, optional
        The keyword arguments passed to memory.cache.

    Returns
    -------
    mem : joblib.MemorizedFunc, wrapped in _ShelvedFunc if shelving
        Object that wraps the function func to cache its further call.
        This object may be a no-op, if the requested level is lower
        than the value given to _cache()).
        For consistency, a callable object is always returned.

    """
    ...

class CacheMixin:
    """Mixin to add caching to a class.

    This class is a thin layer on top of joblib.Memory, that mainly adds a
    "caching level", similar to a "log level".

    Notes
    -----
    Usage: to cache the results of a method, wrap it in self._cache()
    defined by this class. Caching is performed only if the user-specified
    cache level (self._memory_level) is greater than the value given as a
    parameter to self._cache(). See _cache() documentation for details.

    """
    ...


