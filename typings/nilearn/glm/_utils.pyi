"""
This type stub file was generated by pyright.
"""

"""Misc utilities for the library.

Authors: Bertrand Thirion, Matthew Brett, Ana Luisa Pinho, 2020
"""
def z_score(pvalue, one_minus_pvalue=...): # -> NDArray[float64] | ndarray[Any, dtype[Any]]:
    """Return the z-score(s) corresponding to certain p-value(s) and, \
    optionally, one_minus_pvalue(s) provided as inputs.

    Parameters
    ----------
    pvalue : float or 1-d array shape=(n_pvalues,)
        P-values computed using the survival function.

    one_minus_pvalue : float or 1-d array shape=(n_one_minus_pvalues,), \
        optional
        It shall take the value returned
        by /nilearn/glm/contrasts.py::one_minus_pvalue
        which computes the p_value using the cumulative distribution function,
        with n_one_minus_pvalues = n_pvalues.

    Returns
    -------
    z_scores : 1-d array shape=(n_z_scores,), with n_z_scores = n_pvalues

    """
    ...

def multiple_fast_inverse(a):
    """Compute the inverse of a set of arrays.

    Parameters
    ----------
    a : array_like of shape (n_samples, n_dim, n_dim)
        Set of square matrices to be inverted. A is changed in place.

    Returns
    -------
    a : ndarray
       Yielding the inverse of the inputs.

    Raises
    ------
    LinAlgError :
        If `a` is singular.

    ValueError :
        If `a` is not square, or not 2-dimensional.

    Notes
    -----
    This function is borrowed from scipy.linalg.inv,
    but with some customizations for speed-up.

    """
    ...

def multiple_mahalanobis(effect, covariance): # -> Any:
    """Return the squared Mahalanobis distance for a given set of samples.

    Parameters
    ----------
    effect : array of shape (n_features, n_samples)
        Each column represents a vector to be evaluated.

    covariance : array of shape (n_features, n_features, n_samples)
        Corresponding covariance models stacked along the last axis.

    Returns
    -------
    sqd : array of shape (n_samples,)
         The squared distances (one per sample).

    """
    ...

def full_rank(X, cmax=...): # -> tuple[Unknown, Unknown] | tuple[Any, float]:
    """Compute the condition number of X and if it is larger than cmax, \
    returns a matrix with a condition number smaller than cmax.

    Parameters
    ----------
    X : array of shape (nrows, ncols)
        Input array.

    cmax : float, optional
        Tolerance for condition number.
        Default=1e15.

    Returns
    -------
    X : array of shape (nrows, ncols)
        Output array.

    cond : float,
        Actual condition number.

    """
    ...

def positive_reciprocal(X): # -> NDArray[Any]:
    """Return element-wise reciprocal of array, setting `X`>=0 to 0.

    Return the reciprocal of an array, setting all entries less than or
    equal to 0 to 0. Therefore, it presumes that X should be positive in
    general.

    Parameters
    ----------
    X : array-like

    Returns
    -------
    rX : array
       Array of same shape as `X`, dtype float, with values set to
       1/X where X > 0, 0 otherwise.

    """
    ...

