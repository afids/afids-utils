"""
This type stub file was generated by pyright.
"""

from nilearn._utils import fill_doc
from nilearn.glm._base import BaseGLM

"""Provide facilities to realize a second level analysis on lists of \
first level contrasts or directly on fitted first level models.

Author: Martin Perez-Guevara, 2016
"""
INF = ...
@fill_doc
class SecondLevelModel(BaseGLM):
    """Implement the :term:`General Linear Model<GLM>` for multiple \
    subject :term:`fMRI` data.

    Parameters
    ----------
    mask_img : Niimg-like, :class:`~nilearn.maskers.NiftiMasker` or\
    :class:`~nilearn.maskers.MultiNiftiMasker`, optional
        Mask to be used on data. If an instance of masker is passed,
        then its mask will be used. If no mask is given,
        it will be computed automatically by a
        :class:`~nilearn.maskers.MultiNiftiMasker` with default
        parameters. Automatic mask computation assumes first level imgs have
        already been masked.
    %(target_affine)s

        .. note::
            This parameter is passed to :func:`nilearn.image.resample_img`.

    %(target_shape)s

        .. note::
            This parameter is passed to :func:`nilearn.image.resample_img`.

    %(smoothing_fwhm)s
    %(memory)s
    %(memory_level1)s
    %(verbose0)s
        If 0 prints nothing. If 1 prints final computation time.
        If 2 prints masker computation details.
    %(n_jobs)s
    minimize_memory : :obj:`bool`, optional
        Gets rid of some variables on the model fit results that are not
        necessary for contrast computation and would only be useful for
        further inspection of model details. This has an important impact
        on memory consumption. Default=True.

    """
    def __init__(self, mask_img=..., target_affine=..., target_shape=..., smoothing_fwhm=..., memory=..., memory_level=..., verbose=..., n_jobs=..., minimize_memory=...) -> None:
        ...
    
    @fill_doc
    def fit(self, second_level_input, confounds=..., design_matrix=...): # -> Self@SecondLevelModel:
        """Fit the second-level :term:`GLM`.

        1. create design matrix
        2. do a masker job: fMRI_data -> Y
        3. fit regression to (Y, X)

        Parameters
        ----------
        %(second_level_input)s
        confounds : :class:`pandas.DataFrame`, optional
            Must contain a ``subject_label`` column. All other columns are
            considered as confounds and included in the model. If
            ``design_matrix`` is provided then this argument is ignored.
            The resulting second level design matrix uses the same column
            names as in the given :class:`~pandas.DataFrame` for confounds.
            At least two columns are expected, ``subject_label`` and at
            least one confound.

        design_matrix : :class:`pandas.DataFrame`, optional
            Design matrix to fit the :term:`GLM`. The number of rows
            in the design matrix must agree with the number of maps derived
            from ``second_level_input``.
            Ensure that the order of maps given by a ``second_level_input``
            list of Niimgs matches the order of the rows in the design matrix.

        """
        ...
    
    @fill_doc
    def compute_contrast(self, second_level_contrast=..., first_level_contrast=..., second_level_stat_type=..., output_type=...): # -> Any | dict[Unknown, Unknown] | None:
        """Generate different outputs corresponding to \
        the contrasts provided e.g. z_map, t_map, effects and variance.

        Parameters
        ----------
        %(second_level_contrast)s
        first_level_contrast : :obj:`str` or :class:`numpy.ndarray` of\
        shape (n_col) with respect to\
        :class:`~nilearn.glm.first_level.FirstLevelModel`, optional

            - In case a :obj:`list` of
              :class:`~nilearn.glm.first_level.FirstLevelModel` was provided
              as ``second_level_input``, we have to provide a contrast to
              apply to the first level models to get the corresponding list
              of images desired, that would be tested at the second level.
            - In case a :class:`~pandas.DataFrame` was provided as
              ``second_level_input`` this is the map name to extract from the
              :class:`~pandas.DataFrame` ``map_name`` column. It has to be
              a 't' contrast.

        second_level_stat_type : {'t', 'F'} or None, optional
            Type of the second level contrast. Default=None.

        output_type : {'z_score', 'stat', 'p_value', \
                :term:`'effect_size'<Parameter Estimate>`, 'effect_variance', \
                'all'}, optional
            Type of the output map. Default='z-score'.

        Returns
        -------
        output_image : :class:`~nibabel.nifti1.Nifti1Image`
            The desired output image(s). If ``output_type == 'all'``, then
            the output is a dictionary of images, keyed by the type of image.

        """
        ...
    


@fill_doc
def non_parametric_inference(second_level_input, confounds=..., design_matrix=..., second_level_contrast=..., first_level_contrast=..., mask=..., smoothing_fwhm=..., model_intercept=..., n_perm=..., two_sided_test=..., random_state=..., n_jobs=..., verbose=..., threshold=..., tfce=...): # -> Any | dict[str, Unknown | Any | None] | None:
    """Generate p-values corresponding to the contrasts provided \
    based on permutation testing.

    This function is a light wrapper around
    :func:`~nilearn.mass_univariate.permuted_ols`, with additional steps to
    ensure compatibility with the :mod:`~nilearn.glm.second_level` module.

    Parameters
    ----------
    %(second_level_input)s

    confounds : :obj:`pandas.DataFrame` or None, optional
        Must contain a subject_label column. All other columns are
        considered as confounds and included in the model. If
        ``design_matrix`` is provided then this argument is ignored.
        The resulting second level design matrix uses the same column
        names as in the given :obj:`~pandas.DataFrame` for confounds.
        At least two columns are expected, ``subject_label`` and at
        least one confound.

    design_matrix : :obj:`pandas.DataFrame` or None, optional
        Design matrix to fit the :term:`GLM`. The number of rows
        in the design matrix must agree with the number of maps derived
        from ``second_level_input``.
        Ensure that the order of maps given by a ``second_level_input``
        list of Niimgs matches the order of the rows in the design matrix.

    %(second_level_contrast)s

    first_level_contrast : :obj:`str`, optional
        In case a pandas DataFrame was provided as second_level_input this
        is the map name to extract from the pandas dataframe map_name column.
        It has to be a 't' contrast.

        .. versionadded:: 0.9.0

    mask : Niimg-like, :obj:`~nilearn.maskers.NiftiMasker` or \
            :obj:`~nilearn.maskers.MultiNiftiMasker` object, optional
        Mask to be used on data. If an instance of masker is passed,
        then its mask will be used. If no mask is given, it will be computed
        automatically by a :class:`~nilearn.maskers.MultiNiftiMasker` with
        default parameters. Automatic mask computation assumes first level
        imgs have already been masked.

    %(smoothing_fwhm)s

    model_intercept : :obj:`bool`, optional
        If ``True``, a constant column is added to the confounding variates
        unless the tested variate is already the intercept.
        Default=True.

    n_perm : :obj:`int`, optional
        Number of permutations to perform.
        Permutations are costly but the more are performed, the more precision
        one gets in the p-values estimation. Default=10000.

    two_sided_test : :obj:`bool`, optional

        - If ``True``, performs an unsigned t-test.
          Both positive and negative effects are considered; the null
          hypothesis is that the effect is zero.
        - If ``False``, only positive effects are considered as relevant.
          The null hypothesis is that the effect is zero or negative.

        Default=False.

    %(random_state)s
        Use this parameter to have the same permutations in each
        computing units.

    %(n_jobs)s

    %(verbose0)s

    threshold : None or :obj:`float`, optional
        Cluster-forming threshold in p-scale.
        This is only used for cluster-level inference.
        If None, no cluster-level inference will be performed.
        Default=None.

        .. warning::

            Performing cluster-level inference will increase the computation
            time of the permutation procedure.

        .. versionadded:: 0.9.2

    tfce : :obj:`bool`, optional
        Whether to calculate :term:`TFCE` as part of the permutation procedure
        or not.
        The TFCE calculation is implemented as described in
        :footcite:t:`Smith2009a`.
        Default=False.

        .. warning::

            Performing TFCE-based inference will increase the computation
            time of the permutation procedure considerably.
            The permutations may take multiple hours, depending on how many
            permutations are requested and how many jobs are performed in
            parallel.

        .. versionadded:: 0.9.2

    Returns
    -------
    neg_log10_vfwe_pvals_img : :class:`~nibabel.nifti1.Nifti1Image`
        The image which contains negative logarithm of the
        voxel-level FWER-corrected p-values.

        .. note::
            This is returned if ``threshold`` is None (the default).

    outputs : :obj:`dict`
        Output images, organized in a dictionary.
        Each image is 3D/4D, with the potential fourth dimension corresponding
        to the regressors.

        .. note::
            This is returned if ``tfce`` is False or ``threshold`` is not None.

        .. versionadded:: 0.9.2

        Here are the keys:

        =============== =======================================================
        key             description
        =============== =======================================================
        t               T-statistics associated with the significance test of
                        the n_regressors explanatory variates against the
                        n_descriptors target variates.
        logp_max_t      Negative log10 family-wise error rate-corrected
                        p-values corrected based on the distribution of maximum
                        t-statistics from permutations.
        size            Cluster size values associated with the significance
                        test of the n_regressors explanatory variates against
                        the n_descriptors target variates.

                        Returned only if ``threshold`` is not None.
        logp_max_size   Negative log10 family-wise error rate-corrected
                        p-values corrected based on the distribution of maximum
                        cluster sizes from permutations.
                        This map is generated through cluster-level methods, so
                        the values in the map describe the significance of
                        clusters, rather than individual voxels.

                        Returned only if ``threshold`` is not None.
        mass            Cluster mass values associated with the significance
                        test of the n_regressors explanatory variates against
                        the n_descriptors target variates.

                        Returned only if ``threshold`` is not None.
        logp_max_mass   Negative log10 family-wise error rate-corrected
                        p-values corrected based on the distribution of maximum
                        cluster masses from permutations.
                        This map is generated through cluster-level methods, so
                        the values in the map describe the significance of
                        clusters, rather than individual voxels.

                        Returned only if ``threshold`` is not None.
        tfce            TFCE values associated with the significance test of
                        the n_regressors explanatory variates against the
                        n_descriptors target variates.

                        Returned only if ``tfce`` is True.
        logp_max_tfce   Negative log10 family-wise error rate-corrected
                        p-values corrected based on the distribution of maximum
                        TFCE values from permutations.

                        Returned only if ``tfce`` is True.
        =============== =======================================================

    See Also
    --------
    :func:`~nilearn.mass_univariate.permuted_ols` : For more information on \
        the permutation procedure.

    References
    ----------
    .. footbibliography::
    """
    ...

