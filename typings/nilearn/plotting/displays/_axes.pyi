"""
This type stub file was generated by pyright.
"""

from nilearn._utils.docs import fill_doc

@fill_doc
class BaseAxes:
    """An MPL axis-like object that displays a 2D view of 3D volumes.

    Parameters
    ----------
    %(ax)s
    direction : {'x', 'y', 'z'}
        The directions of the view.

    coord : :obj:`float`
        The coordinate along the direction of the cut.
    %(radiological)s
    """
    def __init__(self, ax, direction, coord, radiological=...) -> None:
        ...
    
    def transform_to_2d(self, data, affine):
        """Transform to a 2D."""
        ...
    
    def add_object_bounds(self, bounds): # -> None:
        """Ensure that axes get rescaled when adding object bounds."""
        ...
    
    def draw_2d(self, data_2d, data_bounds, bounding_box, type=..., **kwargs): # -> Any:
        """Draw 2D."""
        ...
    
    def get_object_bounds(self): # -> tuple[float, float, float, float] | tuple[Any, Any, Any, Any]:
        """Return the bounds of the objects on this axes."""
        ...
    
    def draw_left_right(self, size, bg_color, **kwargs): # -> None:
        """Draw the annotation "L" for left, and "R" for right.

        Parameters
        ----------
        size : :obj:`float`, optional
            Size of the text areas.

        bg_color : matplotlib color: :obj:`str` or (r, g, b) value
            The background color for both text areas.

        """
        ...
    
    def draw_scale_bar(self, bg_color, size=..., units=..., fontproperties=..., frameon=..., loc=..., pad=..., borderpad=..., sep=..., size_vertical=..., label_top=..., color=..., fontsize=..., **kwargs): # -> None:
        """Add a scale bar annotation to the display.

        Parameters
        ----------
        bg_color : matplotlib color: :obj:`str` or (r, g, b) value
            The background color of the scale bar annotation.

        size : :obj:`float`, optional
            Horizontal length of the scale bar, given in `units`.
            Default=5.0.

        units : :obj:`str`, optional
            Physical units of the scale bar (`'cm'` or `'mm'`).
            Default='cm'.

        fontproperties : :class:`~matplotlib.font_manager.FontProperties`\
        or :obj:`dict`, optional
            Font properties for the label text.

        frameon : :obj:`bool`, optional
            Whether the scale bar is plotted with a border. Default=False.

        loc : :obj:`int`, optional
            Location of this scale bar. Valid location codes are documented
            `here <https://matplotlib.org/mpl_toolkits/axes_grid/\
            api/anchored_artists_api.html#mpl_toolkits.axes_grid1.\
            anchored_artists.AnchoredSizeBar>`__.
            Default=4.

        pad : :obj:`int` or :obj:`float`, optional
            Padding around the label and scale bar, in fraction of the font
            size. Default=0.1.

        borderpad : :obj:`int` or :obj:`float`, optional
            Border padding, in fraction of the font size. Default=0.5.

        sep : :obj:`int` or :obj:`float`, optional
            Separation between the label and the scale bar, in points.
            Default=5.

        size_vertical : :obj:`int` or :obj:`float`, optional
            Vertical length of the size bar, given in `units`.
            Default=0.

        label_top : :obj:`bool`, optional
            If ``True``, the label will be over the scale bar.
            Default=False.

        color : :obj:`str`, optional
            Color for the scale bar and label. Default='black'.

        fontsize : :obj:`int`, optional
            Label font size (overwrites the size passed in through the
            ``fontproperties`` argument).

        **kwargs :
            Keyworded arguments to pass to
            :class:`~matplotlib.offsetbox.AnchoredOffsetbox`.

        """
        ...
    
    def draw_position(self, size, bg_color, **kwargs):
        """``draw_position`` is not implemented in base class and \
        should be implemented in derived classes."""
        ...
    


@fill_doc
class CutAxes(BaseAxes):
    """An MPL axis-like object that displays a cut of 3D volumes.

    Parameters
    ----------
    %(ax)s
    direction : {'x', 'y', 'z'}
        The directions of the view.

    coord : :obj:`float`
        The coordinate along the direction of the cut.
    """
    def transform_to_2d(self, data, affine): # -> NDArray[Unknown]:
        """Cut the 3D volume into a 2D slice.

        Parameters
        ----------
        data : 3D :class:`~numpy.ndarray`
            The 3D volume to cut.

        affine : 4x4 :class:`~numpy.ndarray`
            The affine of the volume.

        """
        ...
    
    def draw_position(self, size, bg_color, decimals=..., **kwargs): # -> None:
        """Draw coordinates.

        Parameters
        ----------
        size : :obj:`float`, optional
            Size of the text area.

        bg_color : matplotlib color: :obj:`str` or (r, g, b) value
            The background color for text area.

        decimals : :obj:`bool` or :obj:`str`, optional
            Formatting string for the coordinates.
            If set to ``False``, integer formatting will be used.
            Default=False.

        """
        ...
    


@fill_doc
class GlassBrainAxes(BaseAxes):
    """An MPL axis-like object that displays a 2D projection of 3D \
    volumes with a schematic view of the brain.

    Parameters
    ----------
    %(ax)s
    direction : {'x', 'y', 'z'}
        The directions of the view.

    coord : :obj:`float`
        The coordinate along the direction of the cut.

    plot_abs : :obj:`bool`, optional
        If set to ``True`` the absolute value of the data will be considered.
        Default=True.

    """
    def __init__(self, ax, direction, coord, plot_abs=..., radiological=..., **kwargs) -> None:
        ...
    
    def transform_to_2d(self, data, affine):
        """Return the maximum of the absolute value of the 3D volume \
        along an axis.

        Parameters
        ----------
        data : 3D :class:`numpy.ndarray`
            The 3D volume.

        affine : 4x4 :class:`numpy.ndarray`
            The affine of the volume.

        """
        ...
    
    def draw_position(self, size, bg_color, **kwargs): # -> None:
        """Not implemented as it does not make sense to draw crosses for \
        the position of the cuts \
        since we are taking the max along one axis."""
        ...
    


