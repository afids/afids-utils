"""
This type stub file was generated by pyright.
"""

"""Utilities to resample a Niimg-like object.

See http://nilearn.github.io/stable/manipulating_images/input_output.html
"""
def to_matrix_vector(transform): # -> tuple[Unknown, Unknown]:
    """Split an homogeneous transform into its matrix and vector components.

    The transformation must be represented in homogeneous coordinates.
    It is split into its linear transformation matrix and translation vector
    components.

    This function does not normalize the matrix. This means that for it to be
    the inverse of from_matrix_vector, transform[-1, -1] must equal 1, and
    transform[-1, :-1] must equal 0.

    Parameters
    ----------
    transform : numpy.ndarray
        Homogeneous transform matrix. Example: a (4, 4) transform representing
        linear transformation and translation in 3 dimensions.

    Returns
    -------
    matrix, vector : numpy.ndarray
        The matrix and vector components of the transform matrix.  For
        an (N, N) transform, matrix will be (N-1, N-1) and vector will be
        a 1D array of shape (N-1,).

    See Also
    --------
    from_matrix_vector

    """
    ...

def from_matrix_vector(matrix, vector): # -> NDArray[float64]:
    """Combine a matrix and vector into a homogeneous transform.

    Combine a rotation matrix and translation vector into a transform
    in homogeneous coordinates.

    Parameters
    ----------
    matrix : numpy.ndarray
        An (N, N) array representing the rotation matrix.

    vector : numpy.ndarray
        A (1, N) array representing the translation.

    Returns
    -------
    xform: numpy.ndarray
        An (N+1, N+1) transform matrix.

    See Also
    --------
    nilearn.resampling.to_matrix_vector

    """
    ...

def coord_transform(x, y, z, affine): # -> tuple[Any, Any, Any] | tuple[NDArray[Any], NDArray[Any], NDArray[Any]]:
    """Convert the x, y, z coordinates from one image space to another space.

    Parameters
    ----------
    x : number or ndarray (any shape)
        The x coordinates in the input space.

    y : number or ndarray (same shape as x)
        The y coordinates in the input space.

    z : number or ndarray
        The z coordinates in the input space.

    affine : 2D 4x4 ndarray
        Affine that maps from input to output space.

    Returns
    -------
    x : number or ndarray (same shape as input)
        The x coordinates in the output space.

    y : number or ndarray (same shape as input)
        The y coordinates in the output space.

    z : number or ndarray (same shape as input)
        The z coordinates in the output space.

    Warning: The x, y and z have their output space (e.g. MNI) coordinate
    ordering, not 3D numpy image ordering.

    Examples
    --------
    Transform data from coordinates to brain space. The "affine" matrix
    can be found as the ".affine" attribute of a nifti image, or using
    the "get_affine()" method for older nibabel installations::

        >>> from nilearn import datasets, image
        >>> niimg = datasets.load_mni152_template()
        >>> # Find the MNI coordinates of the voxel (50, 50, 50)
        >>> image.coord_transform(50, 50, 50, niimg.affine)
        (-48.0, -84.0, -22.0)

    """
    ...

def get_bounds(shape, affine): # -> list[tuple[Any, Any]]:
    """Return the world-space bounds occupied by an array given an affine.

    The coordinates returned correspond to the **center** of the corner voxels.

    Parameters
    ----------
    shape : tuple
        shape of the array. Must have 3 integer values.

    affine : numpy.ndarray
        affine giving the linear transformation between voxel coordinates
        and world-space coordinates.

    Returns
    -------
    coord : list of tuples
        coord[i] is a 2-tuple giving minimal and maximal coordinates along
        i-th axis.

    """
    ...

def get_mask_bounds(img): # -> tuple[Any | Unknown, Any | Unknown, Any | Unknown, Any | Unknown, Any | Unknown, Any | Unknown]:
    """Return the world-space bounds occupied by a mask.

    Parameters
    ----------
    img : Niimg-like object
        See :ref:`extracting_data`.
        The image to inspect. Zero values are considered as
        background.

    Returns
    -------
    xmin, xmax, ymin, ymax, zmin, zmax : floats
        The world-space bounds (field of view) occupied by the
        non-zero values in the image

    Notes
    -----
    The image should have only one connect component.

    The affine should be diagonal or diagonal-permuted, use
    reorder_img to ensure that it is the case.

    """
    ...

class BoundingBoxError(ValueError):
    """Raise error when resampling transformation is incompatible with data.

    This can happen, for example, if the field of view of a target affine
    matrix does not contain any of the original data.
    """
    ...


def resample_img(img, target_affine=..., target_shape=..., interpolation=..., copy=..., order=..., clip=..., fill_value=..., force_resample=...):
    """Resample a Niimg-like object.

    Parameters
    ----------
    img : Niimg-like object
        See :ref:`extracting_data`.
        Image(s) to resample.

    target_affine : numpy.ndarray, optional
        If specified, the image is resampled corresponding to this new affine.
        target_affine can be a 3x3 or a 4x4 matrix. (See notes)

    target_shape : tuple or list, optional
        If specified, the image will be resized to match this new shape.
        len(target_shape) must be equal to 3.
        If target_shape is specified, a target_affine of shape (4, 4)
        must also be given. (See notes)

    interpolation : str, optional
        Can be 'continuous', 'linear', or 'nearest'. Indicates the resample
        method. Default='continuous'.

    copy : bool, optional
        If True, guarantees that output array has no memory in common with
        input array.
        In all cases, input images are never modified by this function.
        Default=True.

    order : "F" or "C", optional
        Data ordering in output array. This function is slightly faster with
        Fortran ordering. Default='F'.

    clip : bool, optional
        If True (default) all resampled image values above max(img) and
        under min(img) are clipped to min(img) and max(img). Note that
        0 is added as an image value for clipping, and it is the padding
        value when extrapolating out of field of view.
        If False no clip is performed.
        Default=True.

    fill_value : float, optional
        Use a fill value for points outside of input volume. Default=0.

    force_resample : bool, optional
        Intended for testing, this prevents the use of a padding optimization.
        Default=False.

    Returns
    -------
    resampled : nibabel.Nifti1Image
        input image, resampled to have respectively target_shape and
        target_affine as shape and affine.

    See Also
    --------
    nilearn.image.resample_to_img

    Notes
    -----
    **BoundingBoxError**
    If a 4x4 transformation matrix (target_affine) is given and all of the
    transformed data points have a negative voxel index along one of the
    axis, then none of the data will be visible in the transformed image
    and a BoundingBoxError will be raised.

    If a 4x4 transformation matrix (target_affine) is given and no target
    shape is provided, the resulting image will have voxel coordinate
    (0, 0, 0) in the affine offset (4th column of target affine) and will
    extend far enough to contain all the visible data and a margin of one
    voxel.

    **3x3 transformation matrices**
    If a 3x3 transformation matrix is given as target_affine, it will be
    assumed to represent the three coordinate axes of the target space. In
    this case the affine offset (4th column of a 4x4 transformation matrix)
    as well as the target_shape will be inferred by resample_img, such that
    the resulting field of view is the closest possible (with a margin of
    1 voxel) bounding box around the transformed data.

    In certain cases one may want to obtain a transformed image with the
    closest bounding box around the data, which at the same time respects
    a voxel grid defined by a 4x4 affine transformation matrix. In this
    case, one resamples the image using this function given the target
    affine and no target shape. One then uses crop_img on the result.

    **NaNs and infinite values**
    This function handles gracefully NaNs and infinite values in the input
    data, however they make the execution of the function much slower.

    **Handling non-native endian in given Nifti images**
    This function automatically changes the byte-ordering information
    in the image dtype to new byte order. From non-native to native, which
    implies that if the given image has non-native endianness then the output
    data in Nifti image will have native dtype. This is only the case when
    if the given target_affine (transformation matrix) is diagonal and
    homogeneous.

    """
    ...

def resample_to_img(source_img, target_img, interpolation=..., copy=..., order=..., clip=..., fill_value=..., force_resample=...):
    """Resample a Niimg-like source image on a target Niimg-like image.

    No registration is performed: the image should already be aligned.

    .. versionadded:: 0.2.4

    Parameters
    ----------
    source_img : Niimg-like object
        See :ref:`extracting_data`.
        Image(s) to resample.

    target_img : Niimg-like object
        See :ref:`extracting_data`.
        Reference image taken for resampling.

    interpolation : str, optional
        Can be 'continuous', 'linear', or 'nearest'. Indicates the resample
        method. Default='continuous'.

    copy : bool, optional
        If True, guarantees that output array has no memory in common with
        input array.
        In all cases, input images are never modified by this function.
        Default=True.

    order : "F" or "C", optional
        Data ordering in output array. This function is slightly faster with
        Fortran ordering. Default="F".

    clip : bool, optional
        If False (default) no clip is performed.
        If True all resampled image values above max(img)
        and under min(img) are cllipped to min(img) and max(img).
        Default=False.

    fill_value : float, optional
        Use a fill value for points outside of input volume. Default=0.

    force_resample : bool, optional
        Intended for testing, this prevents the use of a padding optimization.
        Default=False.

    Returns
    -------
    resampled: nibabel.Nifti1Image
        input image, resampled to have respectively target image shape and
        affine as shape and affine.

    See Also
    --------
    nilearn.image.resample_img

    """
    ...

def reorder_img(img, resample=...): # -> Nifti1Image | FileBasedImage:
    """Return an image with the affine diagonal (by permuting axes).

    The orientation of the new image will be RAS (Right, Anterior, Superior).
    If it is impossible to get xyz ordering by permuting the axes, a
    'ValueError' is raised.

    Parameters
    ----------
    img : Niimg-like object
        See :ref:`extracting_data`.
        Image to reorder.

    resample : None or string in {'continuous', 'linear', 'nearest'}, optional
        If resample is None (default), no resampling is performed, the
        axes are only permuted.
        Otherwise resampling is performed and 'resample' will
        be passed as the 'interpolation' argument into
        resample_img.

    """
    ...

