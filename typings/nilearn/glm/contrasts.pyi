"""
This type stub file was generated by pyright.
"""

"""Contrast computation and operation on contrast to \
obtain fixed effect results.

Author: Bertrand Thirion, Martin Perez-Guevara, Ana Luisa Pinho 2020
"""
DEF_TINY = ...
DEF_DOFMAX = ...
def expression_to_contrast_vector(expression, design_columns): # -> NDArray[float64] | Any:
    """Convert a string describing a contrast to a contrast vector.

    Parameters
    ----------
    expression : string
        The expression to convert to a vector.

    design_columns : list or array of strings
        The column names of the design matrix.

    """
    ...

def compute_contrast(labels, regression_result, con_val, contrast_type=...): # -> Contrast:
    """Compute the specified contrast given an estimated glm.

    Parameters
    ----------
    labels : array of shape (n_voxels,)
        A map of values on voxels used to identify the corresponding model

    regression_result : dict
        With keys corresponding to the different labels
        values are RegressionResults instances corresponding to the voxels.

    con_val : numpy.ndarray of shape (p) or (q, p)
        Where q = number of contrast vectors and p = number of regressors.

    contrast_type : {None, 't', 'F'}, optional
        Type of the contrast.  If None, then defaults to 't' for 1D
        `con_val` and 'F' for 2D `con_val`

    Returns
    -------
    con : Contrast instance,
        Yields the statistics of the contrast
        (:term:`effects<Parameter Estimate>`, variance, p-values).

    """
    ...

class Contrast:
    """The contrast class handles the estimation of statistical contrasts \
    on a given model: student (t) or Fisher (F).

    The important feature is that it supports addition,
    thus opening the possibility of fixed-effects models.

    The current implementation is meant to be simple,
    and could be enhanced in the future on the computational side
    (high-dimensional F contrasts may lead to memory breakage).
    """
    def __init__(self, effect, variance, dim=..., dof=..., contrast_type=..., tiny=..., dofmax=...) -> None:
        """Construct instance.

        Parameters
        ----------
        effect : array of shape (contrast_dim, n_voxels)
            The effects related to the contrast.

        variance : array of shape (n_voxels)
            The associated variance estimate.

        dim : int or None, optional
            The dimension of the contrast.

        dof : scalar, optional
            The degrees of freedom of the residuals.
            Default=DEF_DOFMAX

        contrast_type : {'t', 'F'}, optional
            Specification of the contrast type.
            Default='t'.

        tiny : float, optional
            Small quantity used to avoid numerical underflows.
            Default=DEF_TINY

        dofmax : scalar, optional
            The maximum degrees of freedom of the residuals.
            Default=DEF_DOFMAX.

        """
        ...
    
    def effect_size(self): # -> Unknown:
        """Make access to summary statistics more straightforward \
        when computing contrasts."""
        ...
    
    def effect_variance(self): # -> Unknown:
        """Make access to summary statistics more straightforward \
        when computing contrasts."""
        ...
    
    def stat(self, baseline=...):
        """Return the decision statistic associated with the test of the \
        null hypothesis: (H0) 'contrast equals baseline'.

        Parameters
        ----------
        baseline : float, optional
            Baseline value for the test statistic.
            Default=0.0.

        Returns
        -------
        stat : 1-d array, shape=(n_voxels,)
            statistical values, one per voxel.

        """
        ...
    
    def p_value(self, baseline=...): # -> ndarray[Any, dtype[Any]]:
        """Return a parametric estimate of the p-value associated with \
        the null hypothesis (H0): 'contrast equals baseline', \
        using the survival function.

        Parameters
        ----------
        baseline : float, optional
            Baseline value for the test statistic.
            Default=0.0.

        Returns
        -------
        p_values : 1-d array, shape=(n_voxels,)
            p-values, one per voxel

        """
        ...
    
    def one_minus_pvalue(self, baseline=...): # -> ndarray[Any, dtype[Any]]:
        """Return a parametric estimate of the 1 - p-value associated \
        with the null hypothesis (H0): 'contrast equals baseline', \
        using the cumulative distribution function, \
        to ensure numerical stability.

        Parameters
        ----------
        baseline : float, optional
            Baseline value for the test statistic.
            Default=0.0.

        Returns
        -------
        one_minus_pvalues : 1-d array, shape=(n_voxels,)
            one_minus_pvalues, one per voxel

        """
        ...
    
    def z_score(self, baseline=...): # -> NDArray[float64] | ndarray[Any, dtype[Any]]:
        """Return a parametric estimation of the z-score associated \
        with the null hypothesis: (H0) 'contrast equals baseline'.

        Parameters
        ----------
        baseline : float, optional,
            Baseline value for the test statistic.
            Default=0.0.

        Returns
        -------
        z_score : 1-d array, shape=(n_voxels,)
            statistical values, one per voxel

        """
        ...
    
    def __add__(self, other): # -> Contrast:
        """Add two contrast, Yields an new Contrast instance.

        This should be used only on indepndent contrasts.
        """
        ...
    
    def __rmul__(self, scalar): # -> Contrast:
        """Multiply a contrast by a scalar."""
        ...
    
    __mul__ = ...
    def __div__(self, scalar): # -> Contrast:
        ...
    


def compute_fixed_effects(contrast_imgs, variance_imgs, mask=..., precision_weighted=..., dofs=..., return_z_score=...): # -> tuple[Unknown | Any | None, Unknown | Any | None, Unknown | Any | None, Unknown | Any | None] | tuple[Unknown | Any | None, Unknown | Any | None, Unknown | Any | None]:
    """Compute the fixed effects, given images of effects and variance.

    Parameters
    ----------
    contrast_imgs : list of Nifti1Images or strings
        The input contrast images.

    variance_imgs : list of Nifti1Images or strings
        The input variance images.

    mask : Nifti1Image or NiftiMasker instance or None, optional
        Mask image. If None, it is recomputed from contrast_imgs.

    precision_weighted : Bool, optional
        Whether fixed effects estimates should be weighted by inverse
        variance or not. Default=False.

    dofs : array-like or None, default=None
        the degrees of freedom of the models with len = len(variance_imgs)
        when None, it is assumed that the degrees of freedom are 100 per input.

    return_z_score: Bool, default=False
        Whether fixed_fx_z_score_img should be output or not.

    Returns
    -------
    fixed_fx_contrast_img : Nifti1Image
        The fixed effects contrast computed within the mask.

    fixed_fx_variance_img : Nifti1Image
        The fixed effects variance computed within the mask.

    fixed_fx_stat_img : Nifti1Image
        The fixed effects stat computed within the mask.

    fixed_fx_z_score_img : Nifti1Image, optional
        The fixed effects corresponding z-transform

    Warns
    -----
    FutureWarning
        Starting in version 0.13, fixed_fx_z_score_img will always be returned

    """
    ...

