"""
This type stub file was generated by pyright.
"""

from nilearn._utils import fill_doc

"""Hemodynamic response function (hrf) specification.

Here we provide for SPM, Glover hrfs and finite timpulse response (FIR) models.
This module closely follows SPM implementation

Author: Bertrand Thirion, 2011--2018
"""
def spm_hrf(tr, oversampling=..., time_length=..., onset=...): # -> Any:
    """Implement the SPM hrf model.

    Parameters
    ----------
    tr : float
        Scan repeat time, in seconds.

    oversampling : int, optional
        Temporal oversampling factor. Default=50.

    time_length : float, optional
        hrf kernel length, in seconds. Default=32.

    onset : float, optional
        hrf onset time, in seconds. Default=0.

    Returns
    -------
    hrf : array of shape(length / tr * oversampling, dtype=float)
         hrf sampling on the oversampled time grid

    """
    ...

def glover_hrf(tr, oversampling=..., time_length=..., onset=...): # -> Any:
    """Implement the Glover hrf model.

    Parameters
    ----------
    tr : float
        Scan repeat time, in seconds.

    oversampling : int, optional
        Temporal oversampling factor. Default=50.

    time_length : float, optional
        hrf kernel length, in seconds. Default=32.

    onset : float, optional
        Onset of the response. Default=0.

    Returns
    -------
    hrf : array of shape(length / tr * oversampling, dtype=float)
         hrf sampling on the oversampled time grid.

    """
    ...

def spm_time_derivative(tr, oversampling=..., time_length=..., onset=...):
    """Implement the SPM time derivative hrf (dhrf) model.

    Parameters
    ----------
    tr : float
        Scan repeat time, in seconds.

    oversampling : int, optional
        Temporal oversampling factor. Default=50.

    time_length : float, optional
        hrf kernel length, in seconds. Default=32.

    onset : float, optional
        Onset of the response in seconds. Default=0.

    Returns
    -------
    dhrf : array of shape(length / tr, dtype=float)
          dhrf sampling on the provided grid

    """
    ...

def glover_time_derivative(tr, oversampling=..., time_length=..., onset=...):
    """Implement the Glover time derivative hrf (dhrf) model.

    Parameters
    ----------
    tr : float
        Scan repeat time, in seconds.

    oversampling : int, optional
        Temporal oversampling factor. Default=50.

    time_length : float, optional
        hrf kernel length, in seconds. Default=32.

    onset : float, optional
        Onset of the response. Default=0.

    Returns
    -------
    dhrf : array of shape(length / tr), dtype=float
          dhrf sampling on the provided grid

    """
    ...

def spm_dispersion_derivative(tr, oversampling=..., time_length=..., onset=...): # -> Any:
    """Implement the SPM dispersion derivative hrf model.

    Parameters
    ----------
    tr : float
        Scan repeat time, in seconds.

    oversampling : int, optional
        Temporal oversampling factor in seconds. Default=50.

    time_length : float, optional
        hrf kernel length, in seconds. Default=32.

    onset : float, optional
        Onset of the response in seconds. Default=0.

    Returns
    -------
    dhrf : array of shape(length / tr * oversampling), dtype=float
          dhrf sampling on the oversampled time grid

    """
    ...

def glover_dispersion_derivative(tr, oversampling=..., time_length=..., onset=...): # -> Any:
    """Implement the Glover dispersion derivative hrf model.

    Parameters
    ----------
    tr : float
        Scan repeat time, in seconds.

    oversampling : int, optional
        Temporal oversampling factor in seconds. Default=50.

    time_length : float, optional
        hrf kernel length, in seconds. Default=32.

    onset : float, optional
        Onset of the response in seconds. Default=0.

    Returns
    -------
    dhrf : array of shape(length / tr * oversampling), dtype=float
          dhrf sampling on the oversampled time grid

    """
    ...

@fill_doc
def compute_regressor(exp_condition, hrf_model, frame_times, con_id=..., oversampling=..., fir_delays=..., min_onset=...): # -> tuple[Unknown, list[Unknown] | list[Unknown | str] | list[str]]:
    """Convolve regressors with hrf model.

    Parameters
    ----------
    exp_condition : array-like of shape (3, n_events)
        yields description of events for this condition as a
        (onsets, durations, amplitudes) triplet
    %(hrf_model)s
    frame_times : array of shape (n_scans)
        the desired sampling times

    con_id : string, optional, default is 'cond'.
        Identifier of the condition

    oversampling : int, optional
        Oversampling factor to perform the convolution. Default=50.

    fir_delays : [int] 1D-array-like, optional
        Delays (in scans) used in case of a finite impulse response model.

    min_onset : float, optional
        Minimal onset relative to frame_times[0] (in seconds)
        events that start before frame_times[0] + min_onset are not considered.
        Default=-24.

    Returns
    -------
    computed_regressors : array of shape(n_scans, n_reg)
        Computed regressors sampled at frame times.

    reg_names : list of strings
        Corresponding regressor names.

    """
    ...

