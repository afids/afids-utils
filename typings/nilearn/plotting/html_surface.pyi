"""
This type stub file was generated by pyright.
"""

from nilearn._utils import fill_doc
from nilearn.plotting.html_document import HTMLDocument

"""Handle plotting of surfaces for html rendering."""
class SurfaceView(HTMLDocument):
    ...


def one_mesh_info(surf_map, surf_mesh, threshold=..., cmap=..., black_bg=..., bg_map=..., symmetric_cmap=..., bg_on_data=..., darkness=..., vmax=..., vmin=...): # -> dict[Unknown, Unknown]:
    """Deprecate public function. See _one_mesh_info."""
    ...

def full_brain_info(volume_img, mesh=..., threshold=..., cmap=..., black_bg=..., symmetric_cmap=..., bg_on_data=..., darkness=..., vmax=..., vmin=..., vol_to_surf_kwargs=...): # -> dict[Unknown, Unknown]:
    """Deprecate public function. See _full_brain_info."""
    ...

@fill_doc
def view_img_on_surf(stat_map_img, surf_mesh=..., threshold=..., cmap=..., black_bg=..., vmax=..., vmin=..., symmetric_cmap=..., bg_on_data=..., darkness=..., colorbar=..., colorbar_height=..., colorbar_fontsize=..., title=..., title_fontsize=..., vol_to_surf_kwargs=...): # -> SurfaceView:
    """Insert a surface plot of a statistical map into an HTML page.

    Parameters
    ----------
    stat_map_img : Niimg-like object, 3D
        See :ref:`extracting_data`.

    surf_mesh : str or dict, optional.
        If a string, it should be one of the following values:
        %(fsaverage_options)s
        If a dictionary, it should have the same structure as those returned by
        nilearn.datasets.fetch_surf_fsaverage, i.e. keys should be 'infl_left',
        'pial_left', 'sulc_left', 'infl_right', 'pial_right', and 'sulc_right',
        containing inflated and pial meshes, and sulcal depth values for left
        and right hemispheres.
        Default='fsaverage5'.

    threshold : str, number or None, optional
        If None, no thresholding.
        If it is a number only values of amplitude greater
        than threshold will be shown.
        If it is a string it must finish with a percent sign,
        e.g. "25.3%%", and only values of amplitude above the
        given percentile will be shown.

    cmap : str or matplotlib colormap, optional
        Colormap to use. Default=cm.cold_hot.

    black_bg : bool, optional
        If True, image is plotted on a black background. Otherwise on a
        white background. Default=False.

    %(bg_on_data)s

    %(darkness)s
        Default=1.

    vmax : float or None, optional
        upper bound for the colorbar. if None, use the absolute max of the
        brain map.

    vmin : float or None, optional
        min value for mapping colors.
        If `symmetric_cmap` is `True`, `vmin` is always equal to `-vmax` and
        cannot be chosen.
        If `symmetric_cmap` is `False`, `vmin` defaults to the min of the
        image, or 0 when a threshold is used.

    symmetric_cmap : bool, optional
        Make colormap symmetric (ranging from -vmax to vmax).
        You can set it to False if you are plotting only positive values.
        Default=True.

    colorbar : bool, optional
        Add a colorbar or not. Default=True.

    colorbar_height : float, optional
        Height of the colorbar, relative to the figure height. Default=0.5.

    colorbar_fontsize : int, optional
        Fontsize of the colorbar tick labels. Default=25.

    title : str, optional
        Title for the plot.

    title_fontsize : int, optional
        Fontsize of the title. Default=25.

    vol_to_surf_kwargs : dict, optional
        Dictionary of keyword arguments that are passed on to
        :func:`nilearn.surface.vol_to_surf` when extracting a surface from
        the input image. See the function documentation for details.This
        parameter is especially useful when plotting an atlas. See
        https://nilearn.github.io/stable/auto_examples/01_plotting/plot_3d_map_to_surface_projection.html

    Returns
    -------
    SurfaceView : plot of the stat map.
        It can be saved as an html page or rendered (transparently) by the
        Jupyter notebook. Useful methods are :

        - 'resize' to resize the plot displayed in a Jupyter notebook
        - 'save_as_html' to save the plot to a file
        - 'open_in_browser' to save the plot and open it in a web browser.

    See Also
    --------
    nilearn.plotting.view_surf: plot from a surface map on a cortical mesh.

    """
    ...

@fill_doc
def view_surf(surf_mesh, surf_map=..., bg_map=..., threshold=..., cmap=..., black_bg=..., vmax=..., vmin=..., bg_on_data=..., darkness=..., symmetric_cmap=..., colorbar=..., colorbar_height=..., colorbar_fontsize=..., title=..., title_fontsize=...): # -> SurfaceView:
    """Insert a surface plot of a surface map into an HTML page.

    Parameters
    ----------
    surf_mesh : str or list of two numpy.ndarray
        Surface mesh geometry, can be a file (valid formats are
        .gii or Freesurfer specific files such as .orig, .pial,
        .sphere, .white, .inflated) or
        a list of two Numpy arrays, the first containing the x-y-z coordinates
        of the mesh vertices, the second containing the indices
        (into coords) of the mesh faces.

    surf_map : str or numpy.ndarray, optional
        Data to be displayed on the surface mesh. Can be a file (valid formats
        are .gii, .mgz, .nii, .nii.gz, or Freesurfer specific files such as
        .thickness, .area, .curv, .sulc, .annot, .label) or
        a Numpy array

    bg_map : str or numpy.ndarray, optional
        Background image to be plotted on the mesh underneath the
        surf_data in greyscale, most likely a sulcal depth map for
        realistic shading.
        If the map contains values outside [0, 1], it will be
        rescaled such that all values are in [0, 1]. Otherwise,
        it will not be modified.
        Default=None.

    %(bg_on_data)s

    %(darkness)s
        Default=1.

    threshold : str, number or None, optional
        If None, no thresholding.
        If it is a number only values of amplitude greater
        than threshold will be shown.
        If it is a string it must finish with a percent sign,
        e.g. "25.3%%", and only values of amplitude above the
        given percentile will be shown.

    cmap : str or matplotlib colormap, optional
        You might want to change it to 'gnist_ncar' if plotting a
        surface atlas. Default=cm.cold_hot.

    black_bg : bool, optional
        If True, image is plotted on a black background. Otherwise on a
        white background. Default=False.

    symmetric_cmap : bool, optional
        Make colormap symmetric (ranging from -vmax to vmax).
        Set it to False if you are plotting a surface atlas. Default=True.

    vmax : float or None, optional
        upper bound for the colorbar. if None, use the absolute max of the
        brain map.

    vmin : float or None, optional
        min value for mapping colors.
        If `symmetric_cmap` is `True`, `vmin` is always equal to `-vmax` and
        cannot be chosen.
        If `symmetric_cmap` is `False`, `vmin` defaults to the min of the
        image, or 0 when a threshold is used.

    colorbar : bool, optional
        Add a colorbar or not. Default=True.

    colorbar_height : float, optional
        Height of the colorbar, relative to the figure height. Default=0.5.

    colorbar_fontsize : int, optional
        Fontsize of the colorbar tick labels. Default=25.

    title : str, optional
        Title for the plot.

    title_fontsize : int, optional
        Fontsize of the title. Default=25.

    Returns
    -------
    SurfaceView : plot of the stat map.
        It can be saved as an html page or rendered (transparently) by the
        Jupyter notebook. Useful methods are :

        - 'resize' to resize the plot displayed in a Jupyter notebook
        - 'save_as_html' to save the plot to a file
        - 'open_in_browser' to save the plot and open it in a web browser.

    See Also
    --------
    nilearn.plotting.view_img_on_surf: Surface plot from a 3D statistical map.

    """
    ...

