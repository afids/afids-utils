"""
This type stub file was generated by pyright.
"""

from nilearn import _utils
from nilearn.maskers.nifti_masker import NiftiMasker

"""Transformer used to apply basic transformations \
on multi subject MRI data."""
@_utils.fill_doc
class MultiNiftiMasker(NiftiMasker, _utils.CacheMixin):
    """Class for masking of Niimg-like objects.

    MultiNiftiMasker is useful when dealing with image sets from multiple
    subjects. Use case: integrates well with decomposition by MultiPCA and
    CanICA (multi-subject models)

    Parameters
    ----------
    mask_img : Niimg-like object
        See :ref:`extracting_data`.
        Mask of the data. If not given, a mask is computed in the fit step.
        Optional parameters can be set using mask_args and mask_strategy to
        fine tune the mask extraction.
    %(smoothing_fwhm)s
    %(standardize_maskers)s
    %(standardize_confounds)s
    high_variance_confounds : :obj:`bool`, optional
        If True, high variance confounds are computed on provided image with
        :func:`nilearn.image.high_variance_confounds` and default parameters
        and regressed out. Default=False.
    %(detrend)s
    %(low_pass)s
    %(high_pass)s
    %(t_r)s
    target_affine : 3x3 or 4x4 :obj:`numpy.ndarray`, optional
        This parameter is passed to image.resample_img. Please see the
        related documentation for details.

    target_shape : 3-:obj:`tuple` of :obj:`int`, optional
        This parameter is passed to image.resample_img. Please see the
        related documentation for details.

    %(mask_strategy)s

        .. note::
            Depending on this value, the mask will be computed from
            :func:`nilearn.masking.compute_multi_background_mask`,
            :func:`nilearn.masking.compute_multi_epi_mask`, or
            :func:`nilearn.masking.compute_multi_brain_mask`.

        Default is 'background'.

    mask_args : :obj:`dict`, optional
        If mask is None, these are additional parameters passed to
        masking.compute_background_mask or masking.compute_epi_mask
        to fine-tune mask computation. Please see the related documentation
        for details.

    dtype : {dtype, "auto"}, optional
        Data type toward which the data should be converted. If "auto", the
        data will be converted to int32 if dtype is discrete and float32 if it
        is continuous.
    %(memory)s
    %(memory_level)s
    %(n_jobs)s
    %(verbose0)s
    %(masker_kwargs)s

    Attributes
    ----------
    mask_img_ : :obj:`nibabel.nifti1.Nifti1Image`
        The mask of the data.

    affine_ : 4x4 :obj:`numpy.ndarray`
        Affine of the transformed image.

    n_elements_ : :obj:`int`
        The number of voxels in the mask.

        .. versionadded:: 0.9.2

    See Also
    --------
    nilearn.image.resample_img: image resampling
    nilearn.masking.compute_epi_mask: mask computation
    nilearn.masking.apply_mask: mask application on image
    nilearn.signal.clean: confounds removal and general filtering of signals

    """
    def __init__(self, mask_img=..., smoothing_fwhm=..., standardize=..., standardize_confounds=..., detrend=..., high_variance_confounds=..., low_pass=..., high_pass=..., t_r=..., target_affine=..., target_shape=..., mask_strategy=..., mask_args=..., dtype=..., memory=..., memory_level=..., n_jobs=..., verbose=..., **kwargs) -> None:
        ...
    
    def fit(self, imgs=..., y=...): # -> Self@MultiNiftiMasker:
        """Compute the mask corresponding to the data.

        Parameters
        ----------
        imgs : :obj:`list` of Niimg-like objects
            See :ref:`extracting_data`.
            Data on which the mask must be calculated. If this is a list,
            the affine is considered the same for all.

        y : None
            This parameter is unused. It is solely included for scikit-learn
            compatibility.

        """
        ...
    
    def transform_imgs(self, imgs_list, confounds=..., sample_mask=..., copy=..., n_jobs=...): # -> Generator[Unknown | None, Any, None] | list[Unknown | None] | Generator[Unknown | None, Unknown, None]:
        """Prepare multi subject data in parallel.

        Parameters
        ----------
        imgs_list : :obj:`list` of Niimg-like objects
            See :ref:`extracting_data`.
            List of imgs file to prepare. One item per subject.

        confounds : :obj:`list` of confounds, optional
            List of confounds (2D arrays or filenames pointing to CSV
            files or pandas DataFrames). Must be of same length than imgs_list.

        sample_mask : :obj:`list` of sample_mask, optional
            List of sample_mask (1D arrays) if scrubbing motion outliers.
            Must be of same length than imgs_list.

                .. versionadded:: 0.8.0

        copy : :obj:`bool`, optional
            If True, guarantees that output array has no memory in common with
            input array. Default=True.

        n_jobs : :obj:`int`, optional
            The number of cpus to use to do the computation. -1 means
            'all cpus'. Default=1.

        Returns
        -------
        region_signals : :obj:`list` of 2D :obj:`numpy.ndarray`
            List of signal for each element per subject.
            shape: list of (number of scans, number of elements)

        Warns
        -----
        DeprecationWarning
            If a 3D niimg input is provided, the current behavior
            (adding a singleton dimension to produce a 2D array) is deprecated.
            Starting in version 0.12, a 1D array will be returned for 3D
            inputs.

        """
        ...
    
    def transform(self, imgs, confounds=..., sample_mask=...): # -> Any | Generator[Unknown | None, Any, None] | list[Unknown | None] | Generator[Unknown | None, Unknown, None] | None:
        """Apply mask, spatial and temporal preprocessing.

        Parameters
        ----------
        imgs : :obj:`list` of Niimg-like objects
            See :ref:`extracting_data`.
            Data to be preprocessed

        confounds : CSV file or 2D :obj:`numpy.ndarray` or \
                :obj:`pandas.DataFrame`, optional
            This parameter is passed to signal.clean. Please see the
            corresponding documentation for details.

        sample_mask : :obj:`list` of 1D :obj:`numpy.ndarray`, optional
            List of sample_mask (1D arrays) if scrubbing motion outliers.
            Must be of same length than imgs_list.

                .. versionadded:: 0.8.0

        Returns
        -------
        data : :obj:`list` of :obj:`numpy.ndarray`
            preprocessed images

        Warns
        -----
        DeprecationWarning
            If 3D niimg inputs are provided, the current behavior
            (adding a singleton dimension to produce 2D arrays) is deprecated.
            Starting in version 0.12, 1D arrays will be returned for 3D
            inputs.

        """
        ...
    


