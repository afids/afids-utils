"""
This type stub file was generated by pyright.
"""

from .._utils import fill_doc

"""Miscellaneous matrix plotting utilities."""
@fill_doc
def plot_matrix(mat, title=..., labels=..., figure=..., axes=..., colorbar=..., cmap=..., tri=..., auto_fit=..., grid=..., reorder=..., **kwargs): # -> Any:
    """Plot the given matrix.

    Parameters
    ----------
    mat : 2-D :class:`numpy.ndarray`
        Matrix to be plotted.
    %(title)s
    labels : :obj:`list`, or :class:`numpy.ndarray` of :obj:`str`,\
    or False, or None, optional
        The label of each row and column. Needs to be the same
        length as rows/columns of mat. If False, None, or an
        empty list, no labels are plotted.

    figure : :class:`matplotlib.figure.Figure`, figsize :obj:`tuple`,\
    or None, optional
        Sets the figure used. This argument can be either an existing
        figure, or a pair (width, height) that gives the size of a
        newly-created figure.

        .. note::

            Specifying both axes and figure is not allowed.

    axes : None or :class:`matplotlib.axes.Axes`, optional
        Axes instance to be plotted on. Creates a new one if None.

        .. note::

            Specifying both axes and figure is not allowed.

    %(colorbar)s
        Default=True.
    %(cmap)s
        Default=`plt.cm.RdBu_r`.
    tri : {'full', 'lower', 'diag'}, optional
        Which triangular part of the matrix to plot:

            - 'lower': Plot the lower part
            - 'diag': Plot the lower part with the diagonal
            - 'full': Plot the full matrix

        Default='full'.

    auto_fit : :obj:`bool`, optional
        If auto_fit is True, the axes are dimensioned to give room
        for the labels. This assumes that the labels are resting
        against the bottom and left edges of the figure.
        Default=True.

    grid : color or False, optional
        If not False, a grid is plotted to separate rows and columns
        using the given color. Default=False.

    reorder : :obj:`bool` or {'single', 'complete', 'average'}, optional
        If not False, reorders the matrix into blocks of clusters.
        Accepted linkage options for the clustering are 'single',
        'complete', and 'average'. True defaults to average linkage.
        Default=False.

        .. note::
            This option is only available with SciPy >= 1.0.0.

        .. versionadded:: 0.4.1

    kwargs : extra keyword arguments, optional
        Extra keyword arguments are sent to pylab.imshow.

    Returns
    -------
    display : :class:`matplotlib.axes.Axes`
        Axes image.

    """
    ...

@fill_doc
def plot_contrast_matrix(contrast_def, design_matrix, colorbar=..., ax=..., output_file=...): # -> None:
    """Create plot for contrast definition.

    Parameters
    ----------
    contrast_def : :obj:`str` or :class:`numpy.ndarray` of shape (n_col),\
    or :obj:`list` of :obj:`str`, or :class:`numpy.ndarray` of shape (n_col)

        where ``n_col`` is the number of columns of the design matrix, (one
        array per run). If only one array is provided when there are several
        runs, it will be assumed that the same contrast is desired for all
        runs. The string can be a formula compatible with
        :meth:`pandas.DataFrame.eval`. Basically one can use the name of the
        conditions as they appear in the design matrix of the fitted model
        combined with operators +- and combined with numbers with operators
        +-`*`/.

    design_matrix : :class:`pandas.DataFrame`
        Design matrix to use.
    %(colorbar)s
        Default=False.
    ax : :class:`matplotlib.axes.Axes`, optional
        Axis on which to plot the figure.
        If None, a new figure will be created.
    %(output_file)s

    Returns
    -------
    ax : :class:`matplotlib.axes.Axes`
        Figure object.

    """
    ...

@fill_doc
def plot_design_matrix(design_matrix, rescale=..., ax=..., output_file=...): # -> None:
    """Plot a design matrix provided as a :class:`pandas.DataFrame`.

    Parameters
    ----------
    design matrix : :class:`pandas.DataFrame`
        Describes a design matrix.

    rescale : :obj:`bool`, optional
        Rescale columns magnitude for visualization or not.
        Default=True.

    ax : :class:`matplotlib.axes.Axes`, optional
        Handle to axes onto which we will draw the design matrix.
    %(output_file)s

    Returns
    -------
    ax : :class:`matplotlib.axes.Axes`
        The axes used for plotting.

    """
    ...

@fill_doc
def plot_event(model_event, cmap=..., output_file=..., **fig_kwargs): # -> FigureBase | None:
    """Create plot for event visualization.

    Parameters
    ----------
    model_event : :class:`pandas.DataFrame` or :obj:`list`\
    of :class:`pandas.DataFrame`
        The :class:`pandas.DataFrame` must have three columns:
        ``trial_type`` with event name, ``onset`` and ``duration``.

        .. note::

            The :class:`pandas.DataFrame` can also be obtained
            from :func:`nilearn.glm.first_level.first_level_from_bids`.

    %(cmap)s
    %(output_file)s
    **fig_kwargs : extra keyword arguments, optional
        Extra arguments passed to :func:`matplotlib.pyplot.subplots`.

    Returns
    -------
    figure : :class:`matplotlib.figure.Figure`
        Plot Figure object.

    """
    ...

