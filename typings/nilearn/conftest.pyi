"""
This type stub file was generated by pyright.
"""

import pytest

"""Configuration and extra fixtures for pytest."""
collect_ignore = ...
def pytest_configure(config): # -> None:
    """Use Agg so that no figures pop up."""
    ...

@pytest.fixture(autouse=True)
def no_int64_nifti(monkeypatch): # -> None:
    """Prevent creating or writing a Nift1Image containing 64-bit ints.

    It is easy to create such images by mistake because Numpy uses int64 by
    default, but tools like FSL fail to read them and Nibabel will refuse to
    write them in the future.

    For tests that do need to manipulate int64 images, it is always possible to
    disable this fixture by parametrizing a test to override it:

    @pytest.mark.parametrize("no_int64_nifti", [None])
    def test_behavior_when_user_provides_int64_img():
        # ...

    But by default it is used automatically so that Nilearn doesn't create such
    images by mistake.

    """
    ...

@pytest.fixture(autouse=True)
def close_all(): # -> Generator[None, Any, None]:
    """Close all matplotlib figures."""
    ...

@pytest.fixture()
def rng(): # -> RandomState:
    """Return a seeded random number generator."""
    ...

@pytest.fixture()
def affine_mni(): # -> NDArray[Any]:
    """Return an affine corresponding to 2mm isotropic MNI template."""
    ...

@pytest.fixture()
def affine_eye(): # -> NDArray[float64]:
    """Return an identity matrix affine."""
    ...

@pytest.fixture()
def shape_3d_default(): # -> tuple[Literal[10], Literal[10], Literal[10]]:
    """Return default shape for a 3D image."""
    ...

@pytest.fixture()
def shape_4d_default(): # -> tuple[Literal[10], Literal[10], Literal[10], Literal[10]]:
    """Return default shape for a 4D image."""
    ...

@pytest.fixture()
def img_3d_rand_eye(): # -> Nifti1Image:
    """Return random 3D Nifti1Image in MNI space."""
    ...

@pytest.fixture()
def img_3d_mni(): # -> Nifti1Image:
    """Return a default random 3D Nifti1Image in MNI space."""
    ...

@pytest.fixture
def img_3d_zeros_eye(): # -> Nifti1Image:
    """Return a zeros-filled 3D Nifti1Image (identity affine)."""
    ...

@pytest.fixture
def img_3d_ones_eye(): # -> Nifti1Image:
    """Return a ones-filled 3D Nifti1Image (identity affine)."""
    ...

@pytest.fixture
def img_4d_zeros_eye(): # -> Nifti1Image:
    """Return a default zeros filled 4D Nifti1Image (identity affine)."""
    ...

@pytest.fixture
def img_4d_ones_eye(): # -> Nifti1Image:
    """Return a default ones filled 4D Nifti1Image (identity affine)."""
    ...

@pytest.fixture
def img_4D_rand_eye(): # -> Nifti1Image:
    """Return a default random filled 4D Nifti1Image (identity affine)."""
    ...

@pytest.fixture()
def testdata_4d_for_plotting(): # -> dict[str, Nifti1Image | dict[str, int]]:
    """Random 4D images for testing figures for multivolume data."""
    ...

