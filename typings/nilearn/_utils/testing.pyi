"""
This type stub file was generated by pyright.
"""

import contextlib

"""Utilities for testing nilearn."""
def with_memory_profiler(func):
    """Use as a decorator to skip tests requiring memory_profiler."""
    ...

def memory_used(func, *args, **kwargs):
    """Compute memory usage when executing func."""
    ...

def is_64bit() -> bool:
    """Return True if python is run on 64bits."""
    ...

def check_deprecation(func, match=...): # -> _Wrapped[..., Unknown, (*args: Unknown, **kwargs: Unknown), Unknown]:
    """Check if a function raises a deprecation warning."""
    ...

def assert_memory_less_than(memory_limit, tolerance, callable_obj, *args, **kwargs): # -> None:
    """Check memory consumption of a callable stays below a given limit.

    Parameters
    ----------
    memory_limit : int
        The expected memory limit in MiB.

    tolerance : float
        As memory_profiler results have some variability, this adds some
        tolerance around memory_limit. Accepted values are in range [0.0, 1.0].

    callable_obj : callable
        The function to be called to check memory consumption.

    """
    ...

def serialize_niimg(img, gzipped=...): # -> bytes:
    """Serialize a Nifti1Image to nifti.

    Serialize to .nii.gz if gzipped, else to .nii Returns a `bytes` object.

    """
    ...

@contextlib.contextmanager
def write_tmp_imgs(*imgs, **kwargs): # -> Generator[LiteralString | Unknown | tuple[Unknown, ...] | list[Unknown], Any, None]:
    """Context manager for writing Nifti images.

    Write nifti images in a temporary location, and remove them at the end of
    the block.

    Parameters
    ----------
    imgs : Nifti1Image
        Several Nifti images. Every format understood by nibabel.save is
        accepted.

    create_files : bool
        If True, imgs are written on disk and filenames are returned. If
        False, nothing is written, and imgs is returned as output. This is
        useful to test the two cases (filename / Nifti1Image) in the same
        loop.

    use_wildcards : bool
        If True, and create_files is True, imgs are written on disk and a
        matching glob is returned.

    Returns
    -------
    filenames : string or list of strings
        Filename(s) where input images have been written. If a single image
        has been given as input, a single string is returned. Otherwise, a
        list of string is returned.

    """
    ...

def are_tests_running(): # -> bool:
    """Return whether we are running the pytest test loader."""
    ...

def skip_if_running_tests(msg=...): # -> None:
    """Raise a SkipTest if we appear to be running the pytest test loader.

    Parameters
    ----------
    msg : string, optional
        The message issued when a test is skipped.

    """
    ...

