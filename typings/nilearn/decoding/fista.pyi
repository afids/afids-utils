"""
This type stub file was generated by pyright.
"""

"""Generic FISTA for solving TV-L1, Graph-Net, etc., problems.

For problems on which the prox of the nonsmooth term \
cannot be computed closed-form (e.g TV-L1), \
we approximate the prox using an inner FISTA loop.
"""
def mfista(f1_grad, f2_prox, total_energy, lipschitz_constant, w_size, dgap_tol=..., init=..., max_iter=..., tol=..., check_lipschitz=..., dgap_factor=..., callback=..., verbose=...): # -> tuple[Unknown, list[Unknown], dict[str, Unknown | float]]:
    """Solve FISTA in a generic way.

    Minimizes the a sum `f + g` of two convex functions f (smooth)
    and g (proximable nonsmooth).

    Parameters
    ----------
    f1_grad : callable(w) -> np.array
        Gradient of smooth part of energy

    f2_prox : callable(w, stepsize, dgap_tol, init?) -> float, dict
        Proximal operator of non-smooth part of energy (f2).
        The returned dict should have a key "converged", whose value
        indicates whether the prox computation converged.

    total_energy : callable(w) -> float
        total energy (i.e smooth (f1) + nonsmooth (f2) parts)

    lipschitz_constant : float
        Lipschitz constant of gradient of f1_grad.

    check_lipschitz : boolean, optional
        If True, check Lipschitz continuity of gradient of smooth part.
        Default=False.

    w_size : int
        Size of the solution. f1, f2, f1_grad, f2_prox (fixed l, tol) must
        accept a w such that w.shape = (w_size,).

    tol : float, optional
        Tolerance on the (primal) cost function. Default=1e-4.

    dgap_tol : float, optional
        If None, the nonsmooth_prox argument returns a float, with the value,
        if not 0, the nonsmooth_prox accepts a third parameter tol, which is
        the tolerance on the computation of the proximal operator and returns a
        float, and a dict with the key "converged", that says if the method to
        compute f2_prox converged or not.

    dgap_factor : float, optional
        Dual gap factor. Used for debugging purpose (control the convergence).

    init : dict-like, optional
        Dictionary of initialization parameters. Possible keys are 'w',
        'stepsize', 'z', 't', 'dgap_factor', etc.

    callback : callable(dict) -> bool
        Function called on every iteration. If it returns True, then the loop
        breaks.

    max_iter : integer, optional
        Maximum number of iterations for the solver.
        Default=1000.

    verbose : integer, optional
        Indicate the level of verbosity.
        Default=2.

    Returns
    -------
    w : ndarray, shape (w_size,)
       A minimizer for `f + g`.

    solver_info : float
        Solver information, for warm starting.

    cost : array of floats
        Cost function (fval) computed on every iteration.

    Notes
    -----
    A motivation for the choice of FISTA as a solver for the TV-L1
    penalized problems emerged in the paper: Elvis Dohmatob,
    Alexandre Gramfort, Bertrand Thirion, Gael Varoquaux,
    "Benchmarking solvers for TV-L1 least-squares and logistic regression
    in brain imaging". Pattern Recoginition in Neuroimaging (PRNI),
    Jun 2014, Tubingen, Germany. IEEE

    """
    ...

