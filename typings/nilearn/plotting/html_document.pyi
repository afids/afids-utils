"""
This type stub file was generated by pyright.
"""

"""Handle HTML plotting."""
MAX_IMG_VIEWS_BEFORE_WARNING = ...
def set_max_img_views_before_warning(new_value): # -> None:
    """Set the number of open views which triggers a warning.

    If `None` or a negative number, disable the memory warning.
    """
    ...

class HTMLDocument:
    """Embeds a plot in a web page.

    If you are running a Jupyter notebook, the plot will be displayed
    inline if this object is the output of a cell.
    Otherwise, use ``open_in_browser()`` to open it in a web browser (or
    ``save_as_html("filename.html")`` to save it as an html file).

    Use ``str(document)`` or ``document.html`` to get the content of the
    web page, and ``document.get_iframe()`` to have it wrapped in an iframe.

    """
    _all_open_html_repr = ...
    def __init__(self, html, width=..., height=...) -> None:
        ...
    
    def resize(self, width, height): # -> Self@HTMLDocument:
        """Resize the plot displayed in a Jupyter notebook.

        Parameters
        ----------
        width : :obj:`int`
            New width of the plot.

        height : :obj:`int`
            New height of the plot.

        """
        ...
    
    def get_iframe(self, width=..., height=...): # -> str:
        """Get the document wrapped in an inline frame.

        For inserting in another HTML page of for display in a Jupyter
        notebook.

        Parameters
        ----------
        width : :obj:`int` or ``None``, optional
            Width of the inline frame. Default=None.

        height : :obj:`int` or ``None``, optional
            Height of the inline frame. Default=None.

        Returns
        -------
        wrapped : :obj:`str`
            Raw HTML code for the inline frame.

        """
        ...
    
    def get_standalone(self): # -> Unknown:
        """Return the plot in an HTML page."""
        ...
    
    def __str__(self) -> str:
        ...
    
    def save_as_html(self, file_name): # -> None:
        """Save the plot in an HTML file, that can later be opened \
        in a browser.

        Parameters
        ----------
        file_name : :obj:`str`
            Path to the HTML file used for saving.

        """
        ...
    
    def open_in_browser(self, file_name=..., temp_file_lifetime=...): # -> None:
        """Save the plot to a temporary HTML file and open it in a browser.

        Parameters
        ----------
        file_name : :obj:`str` or ``None``, optional
            HTML file to use as a temporary file. Default=None.

        temp_file_lifetime : :obj:`float`, optional
            Time, in seconds, after which the temporary file is removed.
            If None, it is never removed.
            Default=30.

        """
        ...
    
    def remove_temp_file(self): # -> None:
        """Remove the temporary file created by \
        ``open_in_browser``, if necessary."""
        ...
    


