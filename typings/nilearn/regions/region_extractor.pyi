"""
This type stub file was generated by pyright.
"""

from nilearn.maskers import NiftiMapsMasker
from .._utils import fill_doc

"""Better brain parcellations for Region of Interest analysis."""
@fill_doc
def connected_regions(maps_img, min_region_size=..., extract_type=..., smoothing_fwhm=..., mask_img=...): # -> tuple[Nifti1Image | FileBasedImage | Unknown, list[Unknown]]:
    """Extract brain connected regions into separate regions.

    .. note::
        The region size should be defined in mm^3.
        See the documentation for more details.

    .. versionadded:: 0.2

    Parameters
    ----------
    maps_img : Niimg-like object
        An image of brain activation or atlas maps to be extracted into set of
        separate brain regions.

    min_region_size : :obj:`float`, optional
        Minimum volume in mm3 for a region to be kept.
        For example, if the voxel size is 3x3x3 mm
        then the volume of the voxel is 27mm^3.
        Default=1350mm^3, which means
        we take minimum size of 1350 / 27 = 50 voxels.
    %(extract_type)s
    %(smoothing_fwhm)s
        Use this parameter to smooth an image to extract most sparser regions.

        .. note::

            This parameter is passed to `nilearn.image.image._smooth_array`.
            It will be used only if ``extract_type='local_regions'``.

        Default=6.

    mask_img : Niimg-like object, optional
        If given, mask image is applied to input data.
        If None, no masking is applied.

    Returns
    -------
    regions_extracted_img : :class:`nibabel.nifti1.Nifti1Image`
        Gives the image in 4D of extracted brain regions.
        Each 3D image consists of only one separated region.

    index_of_each_map : :class:`numpy.ndarray`
        An array of list of indices where each index denotes the identity
        of each extracted region to their family of brain maps.

    See Also
    --------
    nilearn.regions.connected_label_regions : A function can be used for
        extraction of regions on labels based atlas images.

    nilearn.regions.RegionExtractor : A class can be used for both
        region extraction on continuous type atlas images and
        also time series signals extraction from regions extracted.

    """
    ...

@fill_doc
class RegionExtractor(NiftiMapsMasker):
    """Class for brain region extraction.

    Region Extraction is a post processing technique which
    is implemented to automatically segment each brain atlas maps
    into different set of separated brain activated region.
    Particularly, to show that each decomposed brain maps can be
    used to focus on a target specific Regions of Interest analysis.

    See :footcite:`Abraham2014`.

    .. versionadded:: 0.2

    Parameters
    ----------
    maps_img : 4D Niimg-like object
        Image containing a set of whole brain atlas maps or statistically
        decomposed brain maps.

    mask_img : Niimg-like object or None, optional
        Mask to be applied to input data, passed to NiftiMapsMasker.
        If None, no masking is applied.

    min_region_size : :obj:`float`, optional
        Minimum volume in mm3 for a region to be kept.
        For example, if the voxel size is 3x3x3 mm
        then the volume of the voxel is 27mm^3.
        Default=1350mm^3, which means
        we take minimum size of 1350 / 27 = 50 voxels.

    threshold : number, optional
        A value used either in ratio_n_voxels or img_value or percentile
        `thresholding_strategy` based upon the choice of selection.
        Default=1.0.

    thresholding_strategy : :obj:`str` {'ratio_n_voxels', 'img_value',\
 'percentile'}, optional
        If default 'ratio_n_voxels', we apply thresholding that will keep
        the more intense nonzero brain voxels (denoted as n_voxels)
        across all maps (n_voxels being the number of voxels in the brain
        volume). A float value given in `threshold` parameter indicates
        the ratio of voxels to keep meaning (if float=2. then maps will
        together have 2. x n_voxels non-zero voxels). If set to
        'percentile', images are thresholded based on the score obtained
        with the given percentile on the data and the voxel intensities
        which are survived above this obtained score will be kept. If set
        to 'img_value', we apply thresholding based on the non-zero voxel
        intensities across all maps. A value given in `threshold`
        parameter indicates that we keep only those voxels which have
        intensities more than this value.
        Default='ratio_n_voxels'.
    %(extractor)s
    %(smoothing_fwhm)s
        Use this parameter to smooth an image to extract most sparser regions.

        .. note::

            This parameter is passed to
            :func:`nilearn.regions.connected_regions`.
            It will be used only if ``extractor='local_regions'``.

        .. note::

            Please set this parameter according to maps resolution,
            otherwise extraction will fail.

        Default=6mm.
    %(standardize_false)s

        .. note::
            Recommended to set to True if signals are not already standardized.
            Passed to :class:`~nilearn.maskers.NiftiMapsMasker`.

    %(standardize_confounds)s

    %(detrend)s

        .. note::
            Passed to :func:`nilearn.signal.clean`.

        Default=False.

    %(low_pass)s

        .. note::
            Passed to :func:`nilearn.signal.clean`.

    %(high_pass)s

        .. note::
            Passed to :func:`nilearn.signal.clean`.

    %(t_r)s

        .. note::
            Passed to :func:`nilearn.signal.clean`.

    %(memory)s
    %(memory_level)s
    %(verbose0)s

    Attributes
    ----------
    `index_` : :class:`numpy.ndarray`
        Array of list of indices where each index value is assigned to
        each separate region of its corresponding family of brain maps.

    `regions_img_` : :class:`nibabel.nifti1.Nifti1Image`
        List of separated regions with each region lying on an
        original volume concatenated into a 4D image.

    References
    ----------
    .. footbibliography::

    See Also
    --------
    nilearn.regions.connected_label_regions : A function can be readily
        used for extraction of regions on labels based atlas images.

    """
    def __init__(self, maps_img, mask_img=..., min_region_size=..., threshold=..., thresholding_strategy=..., extractor=..., smoothing_fwhm=..., standardize=..., standardize_confounds=..., detrend=..., low_pass=..., high_pass=..., t_r=..., memory=..., memory_level=..., verbose=...) -> None:
        ...
    
    def fit(self, X=..., y=...): # -> Self@RegionExtractor:
        """Prepare the data and setup for the region extraction."""
        ...
    


def connected_label_regions(labels_img, min_size=..., connect_diag=..., labels=...): # -> tuple[Nifti1Image | FileBasedImage | Unknown, Unbound | list[Unknown]] | Nifti1Image | FileBasedImage:
    """Extract connected regions from a brain atlas image \
    defined by labels (integers).

    For each label in a :term:`parcellation`, separates out connected
    components and assigns to each separated region a unique label.

    Parameters
    ----------
    labels_img : Nifti-like image
        A 3D image which contains regions denoted as labels. Each region
        is assigned with integers.

    min_size : :obj:`float`, optional
        Minimum region size (in mm^3) in volume required
        to keep after extraction.
        Removes small or spurious regions.

    connect_diag : :obj:`bool`, optional
        If 'connect_diag' is True, two voxels are considered in the same region
        if they are connected along the diagonal (26-connectivity). If it is
        False, two voxels are considered connected only if they are within the
        same x, y, or z direction. Default=True.

    labels : 1D :class:`numpy.ndarray` or :obj:`list` of :obj:`str`, optional
        Each string in a list or array denote the name of the brain atlas
        regions given in labels_img input. If provided, same names will be
        re-assigned corresponding to each connected component based extraction
        of regions relabelling. The total number of names should match with the
        number of labels assigned in the image.

    Notes
    -----
    The order of the names given in labels should be appropriately matched with
    the unique labels (integers) assigned to each region given in labels_img
    (also excluding 'Background' label).

    Returns
    -------
    new_labels_img : :class:`nibabel.nifti1.Nifti1Image`
        A new image comprising of regions extracted on an input labels_img.

    new_labels : :obj:`list`, optional
        If labels are provided, new labels assigned to region extracted will
        be returned. Otherwise, only new labels image will be returned.

    See Also
    --------
    nilearn.datasets.fetch_atlas_harvard_oxford : For an example of atlas with
        labels.

    nilearn.regions.RegionExtractor : A class can be used for region extraction
        on continuous type atlas images.

    nilearn.regions.connected_regions : A function used for region extraction
        on continuous type atlas images.

    """
    ...

