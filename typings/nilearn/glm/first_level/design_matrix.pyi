"""
This type stub file was generated by pyright.
"""

from nilearn._utils import fill_doc

"""Implement fMRI Design Matrix creation.

Design matrices are represented by Pandas DataFrames
Computations of the different parts of the design matrix are confined
to the make_first_level_design_matrix function, that create a DataFrame
All the others are ancillary functions.

Design matrices contain three different types of regressors:

1. Task-related regressors, that result from the convolution
   of the experimental paradigm regressors with hemodynamic models
   A hemodynamic model is one of:

         - 'spm' : linear filter used in the SPM software
         - 'glover' : linear filter estimated by G.Glover
         - 'spm + derivative', 'glover + derivative': the same linear models,
            plus their time derivative (2 regressors per condition)
         - 'spm + derivative + dispersion', 'glover + derivative + dispersion':
            idem plus the derivative wrt the dispersion parameter of the hrf
            (3 regressors per condition)
         - 'fir' : finite impulse response model, generic linear filter

2. User-specified regressors, that represent information available on
   the data, e.g. motion parameters, physiological data resampled at
   the acquisition rate, or sinusoidal regressors that model the
   signal at a frequency of interest.

3. Drift regressors, that represent low_frequency phenomena of no
   interest in the data; they need to be included to reduce variance
   estimates.

Author: Bertrand Thirion, 2009-2015

"""
@fill_doc
def make_first_level_design_matrix(frame_times, events=..., hrf_model=..., drift_model=..., high_pass=..., drift_order=..., fir_delays=..., add_regs=..., add_reg_names=..., min_onset=..., oversampling=...): # -> DataFrame:
    """Generate a design matrix from the input parameters.

    Parameters
    ----------
    frame_times : array of shape (n_frames,)
        The timing of acquisition of the scans in seconds.

    events : DataFrame instance, optional
        Events data that describes the experimental paradigm.
         The DataFrame instance might have these keys:
            'onset': column to specify the start time of each events in
                     seconds. An error is raised if this key is missing.
            'trial_type': column to specify per-event experimental conditions
                          identifier. If missing each event are labelled
                          'dummy' and considered to form a unique condition.
            'duration': column to specify the duration of each events in
                        seconds. If missing the duration of each events is set
                        to zero.
            'modulation': column to specify the amplitude of each
                          events. If missing the default is set to
                          ones(n_events).

        An experimental paradigm is valid if it has an 'onset' key
        and a 'duration' key.
        If these keys are missing an error will be raised.
        For the others keys a warning will be displayed.
        Particular attention should be given to the 'trial_type' key
        which defines the different conditions in the experimental paradigm.
    %(hrf_model)s
    drift_model : {'cosine', 'polynomial', None}, optional
        Specifies the desired drift model. Default='cosine'.

    high_pass : float, optional
        High-pass frequency in case of a cosine model (in Hz).
        Default=0.01.

    drift_order : int, optional
        Order of the drift model (in case it is polynomial).
        Default=1.

    fir_delays : array of shape(n_onsets) or list, optional
        In case of FIR design, yields the array of delays used in the FIR
        model (in scans). Default=[0].

    add_regs : array of shape(n_frames, n_add_reg) or \
            pandas DataFrame, optional
        additional user-supplied regressors, e.g. data driven noise regressors
        or seed based regressors.

    add_reg_names : list of (n_add_reg,) strings, optional
        If None, while add_regs was provided, these will be termed
        'reg_i', i = 0..n_add_reg - 1
        If add_regs is a DataFrame, the corresponding column names are used
        and add_reg_names is ignored.

    min_onset : float, optional
        Minimal onset relative to frame_times[0] (in seconds)
        events that start before frame_times[0] + min_onset are not considered.
        Default=-24.

    oversampling : int, optional
        Oversampling factor used in temporal convolutions. Default=50.

    Returns
    -------
    design_matrix : DataFrame instance,
        holding the computed design matrix, the index being the frames_times
        and each column a regressor.

    """
    ...

def check_design_matrix(design_matrix): # -> tuple[Unknown, Unknown, list[Unknown]]:
    """Check that the provided DataFrame is indeed a valid design matrix \
    descriptor, and returns a triplet of fields.

    Parameters
    ----------
    design matrix : pandas DataFrame,
        Describes a design matrix.

    Returns
    -------
    frame_times : array of shape (n_frames,),
        Sampling times of the design matrix in seconds.

    matrix : array of shape (n_frames, n_regressors), dtype='f'
        Numerical values for the design matrix.

    names : array of shape (n_events,), dtype='f'
        Per-event onset time (in seconds)

    """
    ...

def make_second_level_design_matrix(subjects_label, confounds=...): # -> DataFrame:
    """Set up a second level design.

    Construct a design matrix with an intercept and subject specific confounds.

    Parameters
    ----------
    subjects_label : :obj:`list` of :obj:`str`
        Contain subject labels to extract confounders in the right order,
        corresponding with the images, to create the design matrix.

    confounds : :class:`pandas.DataFrame` or ``None``, optional
        If given, contains at least two columns, ``subject_label`` and one
        confound. The subjects list determines the rows to extract from
        confounds thanks to its ``subject_label`` column. All subjects must
        have confounds specified. There should be only one row per subject.
        Default=None.

    Returns
    -------
    design_matrix : :class:`pandas.DataFrame`
        The second level design matrix.

    """
    ...

