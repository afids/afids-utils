"""
This type stub file was generated by pyright.
"""

from nibabel.spatialimages import SpatialImage
from .._utils import fill_doc

"""Functions to do automatic visualization of Niimg-like objects.

See http://nilearn.github.io/stable/manipulating_images/input_output.html

Only matplotlib is required.
"""
def show(): # -> None:
    """Show all the figures generated by nilearn and/or matplotlib.

    This function is equivalent to :func:`matplotlib.pyplot.show`,
    but is skipped on the 'Agg' backend where it has no effect other
    than to emit a warning.

    """
    ...

@fill_doc
def plot_img(img, cut_coords=..., output_file=..., display_mode=..., figure=..., axes=..., title=..., threshold=..., annotate=..., draw_cross=..., black_bg=..., colorbar=..., cbar_tick_format=..., resampling_interpolation=..., bg_img=..., vmin=..., vmax=..., radiological=..., **kwargs):
    """Plot cuts of a given image.

    By default Frontal, Axial, and Lateral.

    Parameters
    ----------
    %(img)s
    %(cut_coords)s
    %(output_file)s
    %(display_mode)s
    %(figure)s
    %(axes)s
    %(title)s
    %(threshold)s
    %(annotate)s
    decimals : integer, optional
        Number of decimal places on slice position annotation.
        If False (default),
        the slice position is integer without decimal point.
    %(draw_cross)s
    %(black_bg)s
        Default=False.
    %(colorbar)s
        Default=False.
    cbar_tick_format: str, optional
        Controls how to format the tick labels of the colorbar.
        Ex: use "%%i" to display as integers.
        Default is '%%.2g' for scientific notation.
    %(resampling_interpolation)s
        Default='continuous'.
    %(bg_img)s
        If nothing is specified, no background image is plotted.
        Default=None.
    %(vmin)s
    %(vmax)s
    %(radiological)s
    kwargs : extra keyword arguments, optional
        Extra keyword arguments passed to matplotlib.pyplot.imshow.

    """
    ...

class _MNI152Template(SpatialImage):
    """Constant pointing to the MNI152 Template provided by nilearn."""
    data = ...
    _affine = ...
    vmax = ...
    _shape = ...
    header = ...
    def __init__(self, data=..., affine=..., header=...) -> None:
        ...
    
    def load(self): # -> None:
        ...
    
    def get_data(self): # -> masked_array | None:
        ...
    
    @property
    def affine(self): # -> NDArray[float64] | None:
        ...
    
    def get_affine(self): # -> NDArray[float64] | None:
        ...
    
    @property
    def shape(self): # -> tuple[int, ...] | None:
        ...
    
    def get_shape(self): # -> tuple[int, ...] | None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> Literal['<MNI152Template>']:
        ...
    


MNI152TEMPLATE = ...
@fill_doc
def plot_anat(anat_img=..., cut_coords=..., output_file=..., display_mode=..., figure=..., axes=..., title=..., annotate=..., threshold=..., draw_cross=..., black_bg=..., dim=..., cmap=..., colorbar=..., cbar_tick_format=..., radiological=..., vmin=..., vmax=..., **kwargs):
    """Plot cuts of an anatomical image.

    By default 3 cuts: Frontal, Axial, and Lateral.

    Parameters
    ----------
    anat_img : Niimg-like object, optional
        See :ref:`extracting_data`.
        The anatomical image to be used as a background. If None is
        given, nilearn tries to find a T1 template.
        Default=MNI152TEMPLATE.
    %(cut_coords)s
    %(output_file)s
    %(display_mode)s
    %(figure)s
    %(axes)s
    %(title)s
    %(annotate)s
    %(threshold)s
    %(draw_cross)s
    %(black_bg)s
        Default='auto'.
    %(dim)s
        Default='auto'.
    %(cmap)s
        Default=`plt.cm.gray`.
    colorbar : boolean, optional
        If True, display a colorbar on the right of the plots.
        Default=False.
    cbar_tick_format: str, optional
        Controls how to format the tick labels of the colorbar.
        Ex: use "%%i" to display as integers.
        Default is '%%.2g' for scientific notation.
    %(radiological)s
    %(vmin)s
    %(vmax)s

    Notes
    -----
    Arrays should be passed in numpy convention: (x, y, z) ordered.

    For visualization, non-finite values found in passed 'anat_img'
    are set to zero.

    """
    ...

@fill_doc
def plot_epi(epi_img=..., cut_coords=..., output_file=..., display_mode=..., figure=..., axes=..., title=..., annotate=..., draw_cross=..., black_bg=..., colorbar=..., cbar_tick_format=..., cmap=..., vmin=..., vmax=..., radiological=..., **kwargs):
    """Plot cuts of an EPI image.

    By default 3 cuts: Frontal, Axial, and Lateral.

    Parameters
    ----------
    epi_img : a nifti-image like object or a filename, optional
        The EPI (T2*) image.
    %(cut_coords)s
    %(output_file)s
    %(display_mode)s
    %(figure)s
    %(axes)s
    %(title)s
    %(annotate)s
    %(draw_cross)s
    %(black_bg)s
        Default=True.
    colorbar : boolean, optional
        If True, display a colorbar on the right of the plots.
        Default=False.
    cbar_tick_format: str, optional
        Controls how to format the tick labels of the colorbar.
        Ex: use "%%i" to display as integers.
        Default is '%%.2g' for scientific notation.
    %(cmap)s
        Default=`plt.cm.nipy_spectral`.
    %(vmin)s
    %(vmax)s
    %(radiological)s

    Notes
    -----
    Arrays should be passed in numpy convention: (x, y, z) ordered.

    """
    ...

@fill_doc
def plot_roi(roi_img, bg_img=..., cut_coords=..., output_file=..., display_mode=..., figure=..., axes=..., title=..., annotate=..., draw_cross=..., black_bg=..., threshold=..., alpha=..., cmap=..., dim=..., colorbar=..., cbar_tick_format=..., vmin=..., vmax=..., resampling_interpolation=..., view_type=..., linewidths=..., radiological=..., **kwargs):
    """Plot cuts of an ROI/mask image.

    By default 3 cuts: Frontal, Axial, and Lateral.

    Parameters
    ----------
    roi_img : Niimg-like object
        See :ref:`extracting_data`.
        The ROI/mask image, it could be binary mask or an atlas or ROIs
        with integer values.
    %(bg_img)s
        If nothing is specified, the MNI152 template will be used.
        To turn off background image, just pass "bg_img=None".
        Default=MNI152TEMPLATE.
    %(cut_coords)s
    %(output_file)s
    %(display_mode)s
    %(figure)s
    %(axes)s
    %(title)s
    %(annotate)s
    %(draw_cross)s
    %(black_bg)s
        Default='auto'.
    %(threshold)s
        Default=0.5.
    alpha : float between 0 and 1, optional
        Alpha sets the transparency of the color inside the filled
        contours. Default=0.7.
    %(cmap)s
        Default=`plt.cm.gist_ncar`.
    %(dim)s
        Default='auto'.
    colorbar : boolean, optional
        If True, display a colorbar on the right of the plots.
        Default=False.
    cbar_tick_format: str, optional
        Controls how to format the tick labels of the colorbar.
        Ex: use "%%.2g" to use scientific notation.
        Default is '%%i' to display as integers.
    %(vmin)s
    %(vmax)s
    %(resampling_interpolation)s
        Default='nearest'.
    view_type : {'continuous', 'contours'}, optional
        By default view_type == 'continuous',
        rois are shown as continuous colors.
        If view_type == 'contours', maps are shown as contours.
        For this type, label
        denoted as 0 is considered as background and not shown.
        Default='continuous'.
    %(linewidths)s
        Default=2.5.
    %(radiological)s

    Notes
    -----
    A small threshold is applied by default to eliminate numerical
    background noise.

    For visualization, non-finite values found in passed 'roi_img' or
    'bg_img' are set to zero.

    See Also
    --------
    nilearn.plotting.plot_prob_atlas : To simply plot probabilistic atlases
        (4D images)

    """
    ...

@fill_doc
def plot_prob_atlas(maps_img, bg_img=..., view_type=..., threshold=..., linewidths=..., cut_coords=..., output_file=..., display_mode=..., figure=..., axes=..., title=..., annotate=..., draw_cross=..., black_bg=..., dim=..., colorbar=..., cmap=..., vmin=..., vmax=..., alpha=..., radiological=..., **kwargs): # -> None:
    """Plot the probabilistic atlases onto the anatomical image \
    by default MNI template.

    Parameters
    ----------
    maps_img : Niimg-like object or the filename
        4D image of the probabilistic atlas maps.
    %(bg_img)s
        If nothing is specified, the MNI152 template will be used.
        To turn off background image, just pass "bg_img=False".
        Default=MNI152TEMPLATE.

        .. versionadded:: 0.4.0

    view_type : {'auto', 'contours', 'filled_contours', 'continuous'}, optional
        By default view_type == 'auto', means maps will be displayed
        automatically using any one of the three view types. The automatic
        selection of view type depends on the total number of maps.
        If view_type == 'contours', maps are overlaid as contours
        If view_type == 'filled_contours', maps are overlaid as contours
        along with color fillings inside the contours.
        If view_type == 'continuous', maps are overlaid as continuous
        colors irrespective of the number maps.
        Default='auto'.

    threshold : a str or a number, list of str or numbers, optional
        This parameter is optional and is used to threshold the maps image
        using the given value or automatically selected value. The values
        in the image above the threshold level will be visualized.
        The default strategy, computes a threshold level that seeks to
        minimize (yet not eliminate completely) the overlap between several
        maps for a better visualization.
        The threshold can also be expressed as a percentile over the values
        of the whole atlas. In that case, the value must be specified as
        string finishing with a percent sign, e.g., "25.3%%".
        If a single string is provided, the same percentile will be applied
        over the whole atlas. Otherwise, if a list of percentiles is
        provided, each 3D map is thresholded with certain percentile
        sequentially. Length of percentiles given should match the number
        of 3D map in time (4th) dimension.
        If a number or a list of numbers, the given value will be used
        directly to threshold the maps without any percentile calculation.
        If None, a very small threshold is applied to remove numerical
        noise from the maps background.
    %(linewidths)s
        Default=2.5.
    %(cut_coords)s
    %(output_file)s
    %(display_mode)s
    %(figure)s
    %(axes)s
    %(title)s
    %(annotate)s
    %(draw_cross)s
    %(black_bg)s
        Default='auto'.
    %(dim)s
        Default='auto'.
    %(cmap)s
        Default=`plt.cm.gist_rainbow`.
    %(colorbar)s
        Default=False.
    %(vmin)s
    %(vmax)s
    alpha : float between 0 and 1, optional
        Alpha sets the transparency of the color inside the filled contours.
        Default=0.7.
    %(radiological)s

    See Also
    --------
    nilearn.plotting.plot_roi : To simply plot max-prob atlases (3D images)

    """
    ...

@fill_doc
def plot_stat_map(stat_map_img, bg_img=..., cut_coords=..., output_file=..., display_mode=..., colorbar=..., cbar_tick_format=..., figure=..., axes=..., title=..., threshold=..., annotate=..., draw_cross=..., black_bg=..., cmap=..., symmetric_cbar=..., dim=..., vmin=..., vmax=..., radiological=..., resampling_interpolation=..., **kwargs):
    """Plot cuts of an ROI/mask image.

    By default 3 cuts: Frontal, Axial, and Lateral.

    Parameters
    ----------
    stat_map_img : Niimg-like object
        See :ref:`extracting_data`.
        The statistical map image
    %(bg_img)s
        If nothing is specified, the MNI152 template will be used.
        To turn off background image, just pass "bg_img=None".
        Default=MNI152TEMPLATE.
    %(cut_coords)s
    %(output_file)s
    %(display_mode)s
    %(colorbar)s
        Default=True.
    cbar_tick_format: str, optional
        Controls how to format the tick labels of the colorbar.
        Ex: use "%%i" to display as integers.
        Default is '%%.2g' for scientific notation.
    %(figure)s
    %(axes)s
    %(title)s
    %(threshold)s
        Default=1e-6.
    %(annotate)s
    %(draw_cross)s
    %(black_bg)s
        Default='auto'.
    %(cmap)s

        .. note::
            The colormap *must* be symmetrical.

        Default=`plt.cm.cold_hot`.
    %(symmetric_cbar)s
        Default='auto'.
    %(dim)s
        Default='auto'.
    %(vmin)s
    %(vmax)s
    %(resampling_interpolation)s
        Default='continuous'.
    %(radiological)s

    Notes
    -----
    Arrays should be passed in numpy convention: (x, y, z) ordered.

    For visualization, non-finite values found in passed 'stat_map_img' or
    'bg_img' are set to zero.

    See Also
    --------
    nilearn.plotting.plot_anat : To simply plot anatomical images
    nilearn.plotting.plot_epi : To simply plot raw EPI images
    nilearn.plotting.plot_glass_brain : To plot maps in a glass brain

    """
    ...

@fill_doc
def plot_glass_brain(stat_map_img, output_file=..., display_mode=..., colorbar=..., cbar_tick_format=..., figure=..., axes=..., title=..., threshold=..., annotate=..., black_bg=..., cmap=..., alpha=..., vmin=..., vmax=..., plot_abs=..., symmetric_cbar=..., resampling_interpolation=..., radiological=..., **kwargs):
    """Plot 2d projections of an ROI/mask image (by default 3 projections:
    Frontal, Axial, and Lateral). The brain glass schematics
    are added on top of the image.

    The plotted image should be in MNI space for this function to work
    properly.

    Only glass brain can be plotted by switching stat_map_img to None.

    Parameters
    ----------
    stat_map_img : Niimg-like object
        See :ref:`extracting_data`.
        The statistical map image. It needs to be in MNI space
        in order to align with the brain schematics.
    %(output_file)s
    display_mode : string, optional
        Choose the direction of the cuts: 'x' - sagittal, 'y' - coronal,
        'z' - axial, 'l' - sagittal left hemisphere only,
        'r' - sagittal right hemisphere only, 'ortho' - three cuts are
        performed in orthogonal directions. Possible values are: 'ortho',
        'x', 'y', 'z', 'xz', 'yx', 'yz', 'l', 'r', 'lr', 'lzr', 'lyr',
        'lzry', 'lyrz'. Default='ortho'.
    %(colorbar)s
        Default=False.
    cbar_tick_format: str, optional
        Controls how to format the tick labels of the colorbar.
        Ex: use "%%i" to display as integers.
        Default is '%%.2g' for scientific notation.
    %(figure)s
    %(axes)s
    %(title)s
    %(threshold)s
        Default='auto'.
    %(annotate)s
    %(black_bg)s
        Default=False.
    %(cmap)s
        Default=None.
    alpha : float between 0 and 1, optional
        Alpha transparency for the brain schematics. Default=0.7.
    %(vmin)s
    %(vmax)s
    plot_abs : boolean, optional
        If set to True (default) maximum intensity projection of the
        absolute value will be used (rendering positive and negative
        values in the same manner). If set to false the sign of the
        maximum intensity will be represented with different colors.
        See
        :ref:`sphx_glr_auto_examples_01_plotting_plot_demo_glass_brain_extensive.py` # noqa
        for examples. Default=True.
    %(symmetric_cbar)s
        Default='auto'.
    %(resampling_interpolation)s
        Default='continuous'.
    %(radiological)s 
        
    Notes
    -----
    Arrays should be passed in numpy convention: (x, y, z) ordered.

    """
    ...

@fill_doc
def plot_connectome(adjacency_matrix, node_coords, node_color=..., node_size=..., edge_cmap=..., edge_vmin=..., edge_vmax=..., edge_threshold=..., output_file=..., display_mode=..., figure=..., axes=..., title=..., annotate=..., black_bg=..., alpha=..., edge_kwargs=..., node_kwargs=..., colorbar=..., radiological=...): # -> None:
    """Plot connectome on top of the brain glass schematics.

    The plotted image should be in MNI space for this function to work
    properly.

    In the case of 'l' and 'r' directions (for hemispheric projections),
    markers in the coordinate x == 0 are included in both hemispheres.

    Parameters
    ----------
    adjacency_matrix : numpy array of shape (n, n)
        Represents the link strengths of the graph. The matrix can be
        symmetric which will result in an undirected graph, or not
        symmetric which will result in a directed graph.

    node_coords : numpy array_like of shape (n, 3)
        3d coordinates of the graph nodes in world space.

    node_color : color or sequence of colors or 'auto', optional
        Color(s) of the nodes. If string is given, all nodes
        are plotted with same color given in string.

    node_size : scalar or array_like, optional
        Size(s) of the nodes in points^2. Default=50.

    edge_cmap : colormap, optional
        Colormap used for representing the strength of the edges.
        Default=cm.bwr.

    edge_vmin, edge_vmax : float, optional
        If not None, either or both of these values will be used to
        as the minimum and maximum values to color edges. If None are
        supplied the maximum absolute value within the given threshold
        will be used as minimum (multiplied by -1) and maximum
        coloring levels.

    edge_threshold : str or number, optional
        If it is a number only the edges with a value greater than
        edge_threshold will be shown.
        If it is a string it must finish with a percent sign,
        e.g. "25.3%%", and only the edges with a abs(value) above
        the given percentile will be shown.
    %(output_file)s
    display_mode : string, optional
        Choose the direction of the cuts: 'x' - sagittal, 'y' - coronal,
        'z' - axial, 'l' - sagittal left hemisphere only,
        'r' - sagittal right hemisphere only, 'ortho' - three cuts are
        performed in orthogonal directions. Possible values are: 'ortho',
        'x', 'y', 'z', 'xz', 'yx', 'yz', 'l', 'r', 'lr', 'lzr', 'lyr',
        'lzry', 'lyrz'. Default='ortho'.
    %(figure)s
    %(axes)s
    %(title)s
    %(annotate)s
    %(black_bg)s
        Default=False.
    alpha : float between 0 and 1, optional
        Alpha transparency for the brain schematics. Default=0.7.

    edge_kwargs : dict, optional
        Will be passed as kwargs for each edge matlotlib Line2D.

    node_kwargs : dict, optional
        Will be passed as kwargs to the plt.scatter call that plots all
        the nodes in one go.
    %(colorbar)s
        Default=False.
    %(radiological)s

    See Also
    --------
    nilearn.plotting.find_parcellation_cut_coords : Extraction of node
        coords on brain parcellations.
    nilearn.plotting.find_probabilistic_atlas_cut_coords : Extraction of
        node coords on brain probabilistic atlases.

    """
    ...

@fill_doc
def plot_markers(node_values, node_coords, node_size=..., node_cmap=..., node_vmin=..., node_vmax=..., node_threshold=..., alpha=..., output_file=..., display_mode=..., figure=..., axes=..., title=..., annotate=..., black_bg=..., node_kwargs=..., colorbar=..., radiological=...): # -> None:
    """Plot network nodes (markers) on top of the brain glass schematics.

    Nodes are color coded according to provided nodal measure. Nodal measure
    usually represents some notion of node importance.

    Parameters
    ----------
    node_values : array_like of length n
        Vector containing nodal importance measure. Each node will be colored
        according to corresponding node value.

    node_coords : numpy array_like of shape (n, 3)
        3d coordinates of the graph nodes in world space.

    node_size : 'auto' or scalar or array-like, optional
        Size(s) of the nodes in points^2. By default the size of the node is
        inversely proportional to the number of nodes.

    node_cmap : str or colormap, optional
        Colormap used to represent the node measure. Default=plt.cm.viridis_r.

    node_vmin : float, optional
        Lower bound of the colormap. If `None`, the min of the node_values is
        used.

    node_vmax : float, optional
        Upper bound of the colormap. If `None`, the min of the node_values is
        used.

    node_threshold : float
        If provided only the nodes with a value greater than node_threshold
        will be shown.

    alpha : float between 0 and 1, optional
        Alpha transparency for markers. Default=0.7.
    %(output_file)s

    display_mode : string, optional
        Choose the direction of the cuts: 'x' - sagittal, 'y' - coronal,
        'z' - axial, 'l' - sagittal left hemisphere only,
        'r' - sagittal right hemisphere only, 'ortho' - three cuts are
        performed in orthogonal directions. Possible values are: 'ortho',
        'x', 'y', 'z', 'xz', 'yx', 'yz', 'l', 'r', 'lr', 'lzr', 'lyr',
        'lzry', 'lyrz'. Default='ortho'.
    %(figure)s
    %(axes)s
    %(title)s
    %(annotate)s
    %(black_bg)s
        Default=False.
    node_kwargs : dict, optional
        will be passed as kwargs to the plt.scatter call that plots all
        the nodes in one go
    %(colorbar)s
        Default=True.
    %(radiological)s

    """
    ...

@fill_doc
def plot_carpet(img, mask_img=..., mask_labels=..., t_r=..., detrend=..., output_file=..., figure=..., axes=..., vmin=..., vmax=..., title=..., cmap=..., cmap_labels=..., standardize=...):
    """Plot an image representation of voxel intensities across time.

    This figure is also known as a "grayplot" or "Power plot".

    Parameters
    ----------
    %(img)s
        4D image.

    mask_img : Niimg-like object or None, optional
        Limit plotted voxels to those inside the provided mask (default is
        None). If a 3D atlas is provided, voxels will be grouped by atlas
        value and a colorbar will be added to the left side of the figure
        with atlas labels.
        If not specified, a new mask will be derived from data.
        See :ref:`extracting_data`.

    mask_labels : :obj:`dict`, optional
        If ``mask_img`` corresponds to an atlas, then this dictionary maps
        values from the ``mask_img`` to labels. Dictionary keys are labels
        and values are values within the atlas.
    %(t_r)s

        .. note::
            If ``t_r`` is not provided, it will be inferred from ``img``'s
            header (``img.header.get_zooms()[-1]``).

        .. versionadded:: 0.9.1
            Prior to this, ``t_r`` would be inferred from ``img`` without
            user input.

    detrend : :obj:`bool`, optional
        Detrend and z-score the data prior to plotting. Default=True.
    %(output_file)s
    %(figure)s
    %(axes)s
    %(vmin)s
    %(vmax)s
    %(title)s
    %(cmap)s

        Default=`gray`.

    cmap_labels : :class:`matplotlib.colors.Colormap`, or :obj:`str`,
        optional If ``mask_img`` corresponds to an atlas, then cmap_labels
        can be used to define the colormap for coloring the labels placed
        on the side of the carpet plot.

        Default=`plt.cm.gist_ncar`.
    %(standardize)s

        .. note::

            Added to control passing value to `standardize` of ``signal.clean``
            to call new behavior since passing "zscore" or True (default) is
            deprecated. This parameter will be deprecated in version 0.13 and
            removed in version 0.15.

    Returns
    -------
    figure : :class:`matplotlib.figure.Figure`
        Figure object with carpet plot.

    Notes
    -----
    This figure was originally developed in :footcite:`Power2017`.

    In cases of long acquisitions (>800 volumes), the data will be downsampled
    to have fewer than 800 volumes before being plotted.

    References
    ----------
    .. footbibliography::

    """
    ...

def plot_img_comparison(ref_imgs, src_imgs, masker, plot_hist=..., log=..., ref_label=..., src_label=..., output_dir=..., axes=...): # -> list[Unknown] | None:
    """Create plots to compare two lists of images and measure correlation.

    The first plot displays linear correlation between voxel values.
    The second plot superimposes histograms to compare values distribution.

    Parameters
    ----------
    ref_imgs : nifti_like
        Reference images.

    src_imgs : nifti_like
        Source images.

    masker : NiftiMasker object
        Mask to be used on data.

    plot_hist : Boolean, optional
        If True then histograms of each img in ref_imgs will be plotted
        along-side the histogram of the corresponding image in src_imgs.
        Default=True.

    log : Boolean, optional
        Passed to plt.hist. Default=True.

    ref_label : str, optional
        Name of reference images. Default='image set 1'.

    src_label : str, optional
        Name of source images. Default='image set 2'.

    output_dir : string, optional
        Directory where plotted figures will be stored.

    axes : list of two matplotlib Axes objects, optional
        Can receive a list of the form [ax1, ax2] to render the plots.
        By default new axes will be created.

    Returns
    -------
    corrs : numpy.ndarray
        Pearson correlation between the images.

    """
    ...

