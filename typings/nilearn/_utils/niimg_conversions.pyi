"""
This type stub file was generated by pyright.
"""

"""Conversion utilities."""
def check_niimg(niimg, ensure_ndim=..., atleast_4d=..., dtype=..., return_iterator=..., wildcards=...): # -> Nifti1Image | FileBasedImage | Generator[Nifti1Image | FileBasedImage | Unknown, None, None]:
    """Check that niimg is a proper 3D/4D niimg.

    Turn filenames into objects.

    Parameters
    ----------
    niimg : Niimg-like object
        See :ref:`extracting_data`.
        If niimg is a string or pathlib.Path, consider it as a path to
        Nifti image and call nibabel.load on it. The '~' symbol is expanded to
        the user home folder.
        If it is an object, check if the affine attribute present and that
        nilearn.image.get_data returns a result, raise TypeError otherwise.

    ensure_ndim : integer {3, 4}, optional
        Indicate the dimensionality of the expected niimg. An
        error is raised if the niimg is of another dimensionality.

    atleast_4d : boolean, optional
        Indicates if a 3d image should be turned into a single-scan 4d niimg.
        Default=False.

    dtype : {None, dtype, "auto"}, optional
        Data type toward which the data should be converted. If "auto", the
        data will be converted to int32 if dtype is discrete and float32 if it
        is continuous. If None, data will not be converted to a new data type.
        Default=None.

    return_iterator : boolean, optional
        Returns an iterator on the content of the niimg file input.
        Default=False.

    wildcards : boolean, optional
        Use niimg as a regular expression to get a list of matching input
        filenames.
        If multiple files match, the returned list is sorted using an ascending
        order.
        If no file matches the regular expression, a ValueError exception is
        raised.
        Default=True.

    Returns
    -------
    result : 3D/4D Niimg-like object
        Result can be nibabel.Nifti1Image or the input, as-is. It is guaranteed
        that the returned object has an affine attribute and that its data can
        be retrieved with nilearn.image.get_data.

    Notes
    -----
    In nilearn, special care has been taken to make image manipulation easy.
    This method is a kind of pre-requisite for any data processing method in
    nilearn because it checks if data have a correct format and loads them if
    necessary.

    Its application is idempotent.

    See Also
    --------
        _iter_check_niimg, check_niimg_3d, check_niimg_4d

    """
    ...

def check_niimg_3d(niimg, dtype=...): # -> Nifti1Image | FileBasedImage | Generator[Nifti1Image | FileBasedImage | Unknown, None, None]:
    """Check that niimg is a proper 3D niimg-like object and load it.

    Parameters
    ----------
    niimg : Niimg-like object
        See :ref:`extracting_data`.
        If niimg is a string, consider it as a path to Nifti image and
        call nibabel.load on it.
        If it is an object, check if the affine attribute present and that
        nilearn.image.get_data returns a result, raise TypeError otherwise.

    dtype : {dtype, "auto"}, optional
        Data type toward which the data should be converted. If "auto", the
        data will be converted to int32 if dtype is discrete and float32 if it
        is continuous.

    Returns
    -------
    result : 3D Niimg-like object
        Result can be nibabel.Nifti1Image or the input, as-is. It is guaranteed
        that the returned object has an affine attribute and that its data can
        be retrieved with nilearn.image.get_data.

    Notes
    -----
    In nilearn, special care has been taken to make image manipulation easy.
    This method is a kind of pre-requisite for any data processing method in
    nilearn because it checks if data have a correct format and loads them if
    necessary.

    Its application is idempotent.

    """
    ...

def check_niimg_4d(niimg, return_iterator=..., dtype=...): # -> Nifti1Image | FileBasedImage | Generator[Nifti1Image | FileBasedImage | Unknown, None, None]:
    """Check that niimg is a proper 4D niimg-like object and load it.

    Parameters
    ----------
    niimg : 4D Niimg-like object
        See :ref:`extracting_data`.
        If niimgs is an iterable, checks if data is really 4D. Then,
        considering that it is a list of niimg and load them one by one.
        If niimg is a string, consider it as a path to Nifti image and
        call nibabel.load on it.
        If it is an object, check if the affine attribute present and that
        nilearn.image.get_data returns a result, raise TypeError otherwise.

    dtype : {dtype, "auto"}, optional
        Data type toward which the data should be converted. If "auto", the
        data will be converted to int32 if dtype is discrete and float32 if it
        is continuous.

    return_iterator : boolean, optional
        If True, an iterator of 3D images is returned. This reduces the memory
        usage when `niimgs` contains 3D images.
        If False, a single 4D image is returned. When `niimgs` contains 3D
        images they are concatenated together.
        Default=False.

    Returns
    -------
    niimg: 4D nibabel.Nifti1Image or iterator of 3D nibabel.Nifti1Image

    Notes
    -----
    This function is the equivalent to check_niimg_3d() for Niimg-like objects
    with a session level.

    Its application is idempotent.

    """
    ...

def concat_niimgs(niimgs, dtype=..., ensure_ndim=..., memory=..., memory_level=..., auto_resample=..., verbose=...): # -> Nifti1Image | FileBasedImage:
    """Concatenate a list of 3D/4D niimgs of varying lengths.

    The niimgs list can contain niftis/paths to images of varying dimensions
    (i.e., 3D or 4D) as well as different 3D shapes and affines, as they
    will be matched to the first image in the list if auto_resample=True.

    Parameters
    ----------
    niimgs : iterable of Niimg-like objects or glob pattern
        See :ref:`extracting_data`.
        Niimgs to concatenate.

    dtype : numpy dtype, optional
        The dtype of the returned image. Default=np.float32.

    ensure_ndim : integer, optional
        Indicate the dimensionality of the expected niimg. An
        error is raised if the niimg is of another dimensionality.

    auto_resample : boolean, optional
        Converts all images to the space of the first one.
        Default=False.

    verbose : int, optional
        Controls the amount of verbosity (0 means no messages).
        Default=0.

    memory : instance of joblib.Memory or string, optional
        Used to cache the resampling process.
        By default, no caching is done. If a string is given, it is the
        path to the caching directory.
        Default=Memory(location=None).

    memory_level : integer, optional
        Rough estimator of the amount of memory used by caching. Higher value
        means more memory for caching. Default=0.

    Returns
    -------
    concatenated : nibabel.Nifti1Image
        A single image.

    See Also
    --------
    nilearn.image.index_img

    """
    ...

